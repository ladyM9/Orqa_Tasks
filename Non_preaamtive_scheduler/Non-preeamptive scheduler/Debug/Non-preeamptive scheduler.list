
Non-preeamptive scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008324  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080085c4  080085c4  000095c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800863c  0800863c  0000963c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008644  08008644  00009644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008648  08008648  00009648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  0800864c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  080086c4  0000a078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  08008724  0000a0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  24000138  08008784  0000a138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400099c  08008784  0000a99c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7b4  00000000  00000000  0000a166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc0  00000000  00000000  0002791a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  0002a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001089  00000000  00000000  0002be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039141  00000000  00000000  0002ce89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aff6  00000000  00000000  00065fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016cd51  00000000  00000000  00080fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001edd11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b0  00000000  00000000  001edd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001f3e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080085ac 	.word	0x080085ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	080085ac 	.word	0x080085ac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 febc 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f814 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f9d4 	bl	8000a28 <MX_GPIO_Init>
  MX_ETH_Init();
 8000680:	f000 f890 	bl	80007a4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000684:	f000 f952 	bl	800092c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000688:	f000 f99c 	bl	80009c4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800068c:	f000 f8d6 	bl	800083c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  htim2.Init.Period = T2_PRE;
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <main+0x30>)
 8000692:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000696:	60da      	str	r2, [r3, #12]

    /* USER CODE BEGIN 3 */
	 // timer_val = HAL_GetTick();


	  sch();
 8000698:	f000 fb0c 	bl	8000cb4 <sch>
 800069c:	e7fc      	b.n	8000698 <main+0x28>
 800069e:	bf00      	nop
 80006a0:	2400023c 	.word	0x2400023c

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b09c      	sub	sp, #112	@ 0x70
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ae:	224c      	movs	r2, #76	@ 0x4c
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 fafa 	bl	8007cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2220      	movs	r2, #32
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f007 faf4 	bl	8007cac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006c4:	2002      	movs	r0, #2
 80006c6:	f001 ffd9 	bl	800267c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b33      	ldr	r3, [pc, #204]	@ (800079c <SystemClock_Config+0xf8>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d2:	4a32      	ldr	r2, [pc, #200]	@ (800079c <SystemClock_Config+0xf8>)
 80006d4:	f023 0301 	bic.w	r3, r3, #1
 80006d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006da:	4b30      	ldr	r3, [pc, #192]	@ (800079c <SystemClock_Config+0xf8>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	4b2e      	ldr	r3, [pc, #184]	@ (80007a0 <SystemClock_Config+0xfc>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ec:	4a2c      	ldr	r2, [pc, #176]	@ (80007a0 <SystemClock_Config+0xfc>)
 80006ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <SystemClock_Config+0xfc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000700:	bf00      	nop
 8000702:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <SystemClock_Config+0xfc>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800070a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800070e:	d1f8      	bne.n	8000702 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000710:	2303      	movs	r3, #3
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000714:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000718:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800071a:	2301      	movs	r3, #1
 800071c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	2340      	movs	r3, #64	@ 0x40
 8000720:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	2302      	movs	r3, #2
 8000728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800072a:	2301      	movs	r3, #1
 800072c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800072e:	2318      	movs	r3, #24
 8000730:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000736:	2304      	movs	r3, #4
 8000738:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800073e:	230c      	movs	r3, #12
 8000740:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000742:	2300      	movs	r3, #0
 8000744:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074e:	4618      	mov	r0, r3
 8000750:	f001 ffde 	bl	8002710 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800075a:	f000 faf5 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	233f      	movs	r3, #63	@ 0x3f
 8000760:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fc1e 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800078e:	f000 fadb 	bl	8000d48 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3770      	adds	r7, #112	@ 0x70
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	58000400 	.word	0x58000400
 80007a0:	58024800 	.word	0x58024800

080007a4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_ETH_Init+0x80>)
 80007aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000828 <MX_ETH_Init+0x84>)
 80007ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_ETH_Init+0x88>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <MX_ETH_Init+0x88>)
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_ETH_Init+0x88>)
 80007bc:	22e1      	movs	r2, #225	@ 0xe1
 80007be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_ETH_Init+0x88>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <MX_ETH_Init+0x88>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007cc:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_ETH_Init+0x88>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_ETH_Init+0x80>)
 80007d4:	4a15      	ldr	r2, [pc, #84]	@ (800082c <MX_ETH_Init+0x88>)
 80007d6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_ETH_Init+0x80>)
 80007da:	2201      	movs	r2, #1
 80007dc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_ETH_Init+0x80>)
 80007e0:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <MX_ETH_Init+0x8c>)
 80007e2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_ETH_Init+0x80>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_ETH_Init+0x90>)
 80007e8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_ETH_Init+0x80>)
 80007ec:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007f2:	480c      	ldr	r0, [pc, #48]	@ (8000824 <MX_ETH_Init+0x80>)
 80007f4:	f000 ffe2 	bl	80017bc <HAL_ETH_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007fe:	f000 faa3 	bl	8000d48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000802:	2238      	movs	r2, #56	@ 0x38
 8000804:	2100      	movs	r1, #0
 8000806:	480c      	ldr	r0, [pc, #48]	@ (8000838 <MX_ETH_Init+0x94>)
 8000808:	f007 fa50 	bl	8007cac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <MX_ETH_Init+0x94>)
 800080e:	2221      	movs	r2, #33	@ 0x21
 8000810:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_ETH_Init+0x94>)
 8000814:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000818:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800081a:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <MX_ETH_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2400018c 	.word	0x2400018c
 8000828:	40028000 	.word	0x40028000
 800082c:	24000844 	.word	0x24000844
 8000830:	240000d8 	.word	0x240000d8
 8000834:	24000078 	.word	0x24000078
 8000838:	24000154 	.word	0x24000154

0800083c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	@ 0x38
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800086e:	4b2e      	ldr	r3, [pc, #184]	@ (8000928 <MX_TIM2_Init+0xec>)
 8000870:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000874:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = T2_PRE;
 8000876:	4b2c      	ldr	r3, [pc, #176]	@ (8000928 <MX_TIM2_Init+0xec>)
 8000878:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800087c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <MX_TIM2_Init+0xec>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = T2_CNT;
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <MX_TIM2_Init+0xec>)
 8000886:	f241 3287 	movw	r2, #4999	@ 0x1387
 800088a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_TIM2_Init+0xec>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <MX_TIM2_Init+0xec>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <MX_TIM2_Init+0xec>)
 800089a:	f004 fd4b 	bl	8005334 <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008a4:	f000 fa50 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008b2:	4619      	mov	r1, r3
 80008b4:	481c      	ldr	r0, [pc, #112]	@ (8000928 <MX_TIM2_Init+0xec>)
 80008b6:	f004 ff77 	bl	80057a8 <HAL_TIM_ConfigClockSource>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80008c0:	f000 fa42 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80008c4:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_TIM2_Init+0xec>)
 80008c6:	f004 fd8c 	bl	80053e2 <HAL_TIM_OC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008d0:	f000 fa3a 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4811      	ldr	r0, [pc, #68]	@ (8000928 <MX_TIM2_Init+0xec>)
 80008e4:	f005 fca4 	bl	8006230 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008ee:	f000 fa2b 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM2_Init+0xec>)
 800090a:	f004 fed3 	bl	80056b4 <HAL_TIM_OC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000914:	f000 fa18 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM2_Init+0xec>)
 800091a:	f000 fb29 	bl	8000f70 <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3738      	adds	r7, #56	@ 0x38
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2400023c 	.word	0x2400023c

0800092c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000930:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 8000932:	4a23      	ldr	r2, [pc, #140]	@ (80009c0 <MX_USART3_UART_Init+0x94>)
 8000934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000936:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096e:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000974:	4811      	ldr	r0, [pc, #68]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 8000976:	f005 fd07 	bl	8006388 <HAL_UART_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000980:	f000 f9e2 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	480d      	ldr	r0, [pc, #52]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 8000988:	f006 fd9d 	bl	80074c6 <HAL_UARTEx_SetTxFifoThreshold>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000992:	f000 f9d9 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4808      	ldr	r0, [pc, #32]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 800099a:	f006 fdd2 	bl	8007542 <HAL_UARTEx_SetRxFifoThreshold>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009a4:	f000 f9d0 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_USART3_UART_Init+0x90>)
 80009aa:	f006 fd53 	bl	8007454 <HAL_UARTEx_DisableFifoMode>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009b4:	f000 f9c8 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	24000288 	.word	0x24000288
 80009c0:	40004800 	.word	0x40004800

080009c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ca:	4a16      	ldr	r2, [pc, #88]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d0:	2209      	movs	r2, #9
 80009d2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e2:	2202      	movs	r2, #2
 80009e4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0c:	f001 fd05 	bl	800241a <HAL_PCD_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a16:	f000 f997 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2400031c 	.word	0x2400031c
 8000a24:	40080000 	.word	0x40080000

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	@ 0x30
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b6c      	ldr	r3, [pc, #432]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a44:	4a6a      	ldr	r2, [pc, #424]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4e:	4b68      	ldr	r3, [pc, #416]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5c:	4b64      	ldr	r3, [pc, #400]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a62:	4a63      	ldr	r2, [pc, #396]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6c:	4b60      	ldr	r3, [pc, #384]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a80:	4a5b      	ldr	r2, [pc, #364]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8a:	4b59      	ldr	r3, [pc, #356]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b55      	ldr	r3, [pc, #340]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9e:	4a54      	ldr	r2, [pc, #336]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa8:	4b51      	ldr	r3, [pc, #324]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	4a4c      	ldr	r2, [pc, #304]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000abe:	f043 0308 	orr.w	r3, r3, #8
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad4:	4b46      	ldr	r3, [pc, #280]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ada:	4a45      	ldr	r2, [pc, #276]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae4:	4b42      	ldr	r3, [pc, #264]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	4a3d      	ldr	r2, [pc, #244]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b02:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf0 <MX_GPIO_Init+0x1c8>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DHT11_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f244 0103 	movw	r1, #16387	@ 0x4003
 8000b16:	4837      	ldr	r0, [pc, #220]	@ (8000bf4 <MX_GPIO_Init+0x1cc>)
 8000b18:	f001 fc4c 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b22:	4835      	ldr	r0, [pc, #212]	@ (8000bf8 <MX_GPIO_Init+0x1d0>)
 8000b24:	f001 fc46 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b2e:	4833      	ldr	r0, [pc, #204]	@ (8000bfc <MX_GPIO_Init+0x1d4>)
 8000b30:	f001 fc40 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2102      	movs	r1, #2
 8000b38:	4831      	ldr	r0, [pc, #196]	@ (8000c00 <MX_GPIO_Init+0x1d8>)
 8000b3a:	f001 fc3b 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	482a      	ldr	r0, [pc, #168]	@ (8000bfc <MX_GPIO_Init+0x1d4>)
 8000b54:	f001 fa66 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DHT11_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DHT11_Pin|LD3_Pin;
 8000b58:	f244 0303 	movw	r3, #16387	@ 0x4003
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4820      	ldr	r0, [pc, #128]	@ (8000bf4 <MX_GPIO_Init+0x1cc>)
 8000b72:	f001 fa57 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481a      	ldr	r0, [pc, #104]	@ (8000bf8 <MX_GPIO_Init+0x1d0>)
 8000b90:	f001 fa48 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4816      	ldr	r0, [pc, #88]	@ (8000c04 <MX_GPIO_Init+0x1dc>)
 8000baa:	f001 fa3b 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <MX_GPIO_Init+0x1d4>)
 8000bc8:	f001 fa2c 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	@ (8000c00 <MX_GPIO_Init+0x1d8>)
 8000be4:	f001 fa1e 	bl	8002024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	@ 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	58020400 	.word	0x58020400
 8000bf8:	58020c00 	.word	0x58020c00
 8000bfc:	58020800 	.word	0x58020800
 8000c00:	58021000 	.word	0x58021000
 8000c04:	58021800 	.word	0x58021800

08000c08 <Blink_Led>:

/* USER CODE BEGIN 4 */


void Blink_Led(TIM_HandleTypeDef *htim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c18:	d104      	bne.n	8000c24 <Blink_Led+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000c1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c1e:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <Blink_Led+0x24>)
 8000c20:	f001 fbe1 	bl	80023e6 <HAL_GPIO_TogglePin>
	}
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	58020800 	.word	0x58020800

08000c30 <Message>:

void Message(TIM_HandleTypeDef *htim)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c40:	d106      	bne.n	8000c50 <Message+0x20>
	{

		HAL_UART_Transmit(&huart3, p, sizeof(p), 1000);
 8000c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c46:	2209      	movs	r2, #9
 8000c48:	4903      	ldr	r1, [pc, #12]	@ (8000c58 <Message+0x28>)
 8000c4a:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <Message+0x2c>)
 8000c4c:	f005 fbec 	bl	8006428 <HAL_UART_Transmit>
	}


}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000000 	.word	0x24000000
 8000c5c:	24000288 	.word	0x24000288

08000c60 <Sensor>:

void Sensor(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c70:	d113      	bne.n	8000c9a <Sensor+0x3a>
	{
		int a = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000c72:	2102      	movs	r1, #2
 8000c74:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <Sensor+0x44>)
 8000c76:	f001 fb85 	bl	8002384 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	60fb      	str	r3, [r7, #12]
		int len = sprintf(sensor, "Temp: %d", a);
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4909      	ldr	r1, [pc, #36]	@ (8000ca8 <Sensor+0x48>)
 8000c82:	480a      	ldr	r0, [pc, #40]	@ (8000cac <Sensor+0x4c>)
 8000c84:	f006 fff2 	bl	8007c6c <siprintf>
 8000c88:	60b8      	str	r0, [r7, #8]
		HAL_UART_Transmit(&huart3,(uint8_t *)sensor, len, 1000);
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	4906      	ldr	r1, [pc, #24]	@ (8000cac <Sensor+0x4c>)
 8000c94:	4806      	ldr	r0, [pc, #24]	@ (8000cb0 <Sensor+0x50>)
 8000c96:	f005 fbc7 	bl	8006428 <HAL_UART_Transmit>

	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	58020400 	.word	0x58020400
 8000ca8:	080085c4 	.word	0x080085c4
 8000cac:	24000810 	.word	0x24000810
 8000cb0:	24000288 	.word	0x24000288

08000cb4 <sch>:

void sch()
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	//funkcije[0] = Blink_Led(&htim2)
	//funkcije[1] = Message(&htim3);
	start_millis = HAL_GetTick();
 8000cb8:	f000 fc20 	bl	80014fc <HAL_GetTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8000d28 <sch+0x74>)
 8000cc0:	6013      	str	r3, [r2, #0]
	   //elapsed time




	  if(start_millis - current_millis > task1_period)
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <sch+0x74>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <sch+0x78>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <sch+0x7c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d906      	bls.n	8000ce2 <sch+0x2e>
	  {
		  current_millis = start_millis;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <sch+0x74>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <sch+0x78>)
 8000cda:	6013      	str	r3, [r2, #0]
		  Blink_Led(&htim2);
 8000cdc:	4815      	ldr	r0, [pc, #84]	@ (8000d34 <sch+0x80>)
 8000cde:	f7ff ff93 	bl	8000c08 <Blink_Led>

	  }
	  if(start_millis - current_millis2 > task2_period)
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <sch+0x74>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <sch+0x84>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1ad2      	subs	r2, r2, r3
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <sch+0x88>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d906      	bls.n	8000d02 <sch+0x4e>
	  {
		  current_millis2 = start_millis;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <sch+0x74>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <sch+0x84>)
 8000cfa:	6013      	str	r3, [r2, #0]
		  Sensor(&htim2);
 8000cfc:	480d      	ldr	r0, [pc, #52]	@ (8000d34 <sch+0x80>)
 8000cfe:	f7ff ffaf 	bl	8000c60 <Sensor>
	  }
	  if(start_millis - current_millis3 > task3_period)
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <sch+0x74>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <sch+0x8c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1ad2      	subs	r2, r2, r3
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <sch+0x90>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d906      	bls.n	8000d22 <sch+0x6e>
	  {
		  current_millis3 = start_millis;
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <sch+0x74>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a09      	ldr	r2, [pc, #36]	@ (8000d40 <sch+0x8c>)
 8000d1a:	6013      	str	r3, [r2, #0]
		  Message(&htim2);
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <sch+0x80>)
 8000d1e:	f7ff ff87 	bl	8000c30 <Message>





}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2400080c 	.word	0x2400080c
 8000d2c:	24000800 	.word	0x24000800
 8000d30:	2400000c 	.word	0x2400000c
 8000d34:	2400023c 	.word	0x2400023c
 8000d38:	24000804 	.word	0x24000804
 8000d3c:	24000010 	.word	0x24000010
 8000d40:	24000808 	.word	0x24000808
 8000d44:	24000014 	.word	0x24000014

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d60:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58024400 	.word	0x58024400

08000d88 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	@ 0x38
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a59      	ldr	r2, [pc, #356]	@ (8000f0c <HAL_ETH_MspInit+0x184>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	f040 80ab 	bne.w	8000f02 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dac:	4b58      	ldr	r3, [pc, #352]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db2:	4a57      	ldr	r2, [pc, #348]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000db8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dbc:	4b54      	ldr	r3, [pc, #336]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dca:	4b51      	ldr	r3, [pc, #324]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dda:	4b4d      	ldr	r3, [pc, #308]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000de8:	4b49      	ldr	r3, [pc, #292]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dee:	4a48      	ldr	r2, [pc, #288]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000df8:	4b45      	ldr	r3, [pc, #276]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b42      	ldr	r3, [pc, #264]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	4a40      	ldr	r2, [pc, #256]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e16:	4b3e      	ldr	r3, [pc, #248]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b3a      	ldr	r3, [pc, #232]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	4a39      	ldr	r2, [pc, #228]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e34:	4b36      	ldr	r3, [pc, #216]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b33      	ldr	r3, [pc, #204]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	4a31      	ldr	r2, [pc, #196]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e52:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e60:	4b2b      	ldr	r3, [pc, #172]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	4a2a      	ldr	r2, [pc, #168]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e70:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e7e:	2332      	movs	r3, #50	@ 0x32
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8e:	230b      	movs	r3, #11
 8000e90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	481e      	ldr	r0, [pc, #120]	@ (8000f14 <HAL_ETH_MspInit+0x18c>)
 8000e9a:	f001 f8c3 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e9e:	2386      	movs	r3, #134	@ 0x86
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eae:	230b      	movs	r3, #11
 8000eb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4817      	ldr	r0, [pc, #92]	@ (8000f18 <HAL_ETH_MspInit+0x190>)
 8000eba:	f001 f8b3 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed0:	230b      	movs	r3, #11
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4810      	ldr	r0, [pc, #64]	@ (8000f1c <HAL_ETH_MspInit+0x194>)
 8000edc:	f001 f8a2 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ee0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef2:	230b      	movs	r3, #11
 8000ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <HAL_ETH_MspInit+0x198>)
 8000efe:	f001 f891 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3738      	adds	r7, #56	@ 0x38
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40028000 	.word	0x40028000
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020800 	.word	0x58020800
 8000f18:	58020000 	.word	0x58020000
 8000f1c:	58020400 	.word	0x58020400
 8000f20:	58021800 	.word	0x58021800

08000f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f34:	d116      	bne.n	8000f64 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f36:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <HAL_TIM_Base_MspInit+0x48>)
 8000f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f6c <HAL_TIM_Base_MspInit+0x48>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <HAL_TIM_Base_MspInit+0x48>)
 8000f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	201c      	movs	r0, #28
 8000f5a:	f000 fbfa 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f5e:	201c      	movs	r0, #28
 8000f60:	f000 fc11 	bl	8001786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	58024400 	.word	0x58024400

08000f70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f90:	d11e      	bne.n	8000fd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <HAL_TIM_MspPostInit+0x68>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <HAL_TIM_MspPostInit+0x68>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <HAL_TIM_MspPostInit+0x68>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <HAL_TIM_MspPostInit+0x6c>)
 8000fcc:	f001 f82a 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58020000 	.word	0x58020000

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	22c0      	movs	r2, #192	@ 0xc0
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f006 fe53 	bl	8007cac <memset>
  if(huart->Instance==USART3)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a27      	ldr	r2, [pc, #156]	@ (80010a8 <HAL_UART_MspInit+0xc8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d146      	bne.n	800109e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001010:	f04f 0202 	mov.w	r2, #2
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fb58 	bl	80036dc <HAL_RCCEx_PeriphCLKConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001032:	f7ff fe89 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001036:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <HAL_UART_MspInit+0xcc>)
 8001038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800103c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ac <HAL_UART_MspInit+0xcc>)
 800103e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001042:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <HAL_UART_MspInit+0xcc>)
 8001048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800104c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <HAL_UART_MspInit+0xcc>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <HAL_UART_MspInit+0xcc>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_UART_MspInit+0xcc>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001072:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800108c:	2307      	movs	r3, #7
 800108e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001092:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <HAL_UART_MspInit+0xd0>)
 800109a:	f000 ffc3 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	37e8      	adds	r7, #232	@ 0xe8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004800 	.word	0x40004800
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58020c00 	.word	0x58020c00

080010b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0ba      	sub	sp, #232	@ 0xe8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	22c0      	movs	r2, #192	@ 0xc0
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 fde9 	bl	8007cac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a30      	ldr	r2, [pc, #192]	@ (80011a0 <HAL_PCD_MspInit+0xec>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d159      	bne.n	8001198 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 faed 	bl	80036dc <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001108:	f7ff fe1e 	bl	8000d48 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800110c:	f001 faf0 	bl	80026f0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <HAL_PCD_MspInit+0xf0>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <HAL_PCD_MspInit+0xf0>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001120:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <HAL_PCD_MspInit+0xf0>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800112e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001148:	230a      	movs	r3, #10
 800114a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001152:	4619      	mov	r1, r3
 8001154:	4814      	ldr	r0, [pc, #80]	@ (80011a8 <HAL_PCD_MspInit+0xf4>)
 8001156:	f000 ff65 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800115a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800115e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001172:	4619      	mov	r1, r3
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <HAL_PCD_MspInit+0xf4>)
 8001176:	f000 ff55 	bl	8002024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_PCD_MspInit+0xf0>)
 800117c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001180:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_PCD_MspInit+0xf0>)
 8001182:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001186:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_PCD_MspInit+0xf0>)
 800118c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	37e8      	adds	r7, #232	@ 0xe8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40080000 	.word	0x40080000
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58020000 	.word	0x58020000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <NMI_Handler+0x4>

080011b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <MemManage_Handler+0x4>

080011c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001202:	f000 f967 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <TIM2_IRQHandler+0x10>)
 8001212:	f004 f947 	bl	80054a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */


  /* USER CODE END TIM2_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2400023c 	.word	0x2400023c

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	@ (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f006 fd34 	bl	8007cbc <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24080000 	.word	0x24080000
 8001280:	00000400 	.word	0x00000400
 8001284:	2400084c 	.word	0x2400084c
 8001288:	240009a0 	.word	0x240009a0

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001290:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <SystemInit+0xe4>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001296:	4a36      	ldr	r2, [pc, #216]	@ (8001370 <SystemInit+0xe4>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a0:	4b34      	ldr	r3, [pc, #208]	@ (8001374 <SystemInit+0xe8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	2b06      	cmp	r3, #6
 80012aa:	d807      	bhi.n	80012bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ac:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <SystemInit+0xe8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 030f 	bic.w	r3, r3, #15
 80012b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001374 <SystemInit+0xe8>)
 80012b6:	f043 0307 	orr.w	r3, r3, #7
 80012ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001378 <SystemInit+0xec>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001378 <SystemInit+0xec>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <SystemInit+0xec>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <SystemInit+0xec>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4929      	ldr	r1, [pc, #164]	@ (8001378 <SystemInit+0xec>)
 80012d4:	4b29      	ldr	r3, [pc, #164]	@ (800137c <SystemInit+0xf0>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <SystemInit+0xe8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012e6:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <SystemInit+0xe8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 030f 	bic.w	r3, r3, #15
 80012ee:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <SystemInit+0xe8>)
 80012f0:	f043 0307 	orr.w	r3, r3, #7
 80012f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <SystemInit+0xec>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <SystemInit+0xec>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <SystemInit+0xec>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001308:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <SystemInit+0xec>)
 800130a:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <SystemInit+0xf4>)
 800130c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <SystemInit+0xec>)
 8001310:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <SystemInit+0xf8>)
 8001312:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <SystemInit+0xec>)
 8001316:	4a1c      	ldr	r2, [pc, #112]	@ (8001388 <SystemInit+0xfc>)
 8001318:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800131a:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <SystemInit+0xec>)
 800131c:	2200      	movs	r2, #0
 800131e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <SystemInit+0xec>)
 8001322:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <SystemInit+0xfc>)
 8001324:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <SystemInit+0xec>)
 8001328:	2200      	movs	r2, #0
 800132a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <SystemInit+0xec>)
 800132e:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <SystemInit+0xfc>)
 8001330:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <SystemInit+0xec>)
 8001334:	2200      	movs	r2, #0
 8001336:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <SystemInit+0xec>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <SystemInit+0xec>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001342:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <SystemInit+0xec>)
 8001346:	2200      	movs	r2, #0
 8001348:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <SystemInit+0x100>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <SystemInit+0x104>)
 8001350:	4013      	ands	r3, r2
 8001352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001356:	d202      	bcs.n	800135e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <SystemInit+0x108>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <SystemInit+0x10c>)
 8001360:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001364:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	52002000 	.word	0x52002000
 8001378:	58024400 	.word	0x58024400
 800137c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001380:	02020200 	.word	0x02020200
 8001384:	01ff0000 	.word	0x01ff0000
 8001388:	01010280 	.word	0x01010280
 800138c:	5c001000 	.word	0x5c001000
 8001390:	ffff0000 	.word	0xffff0000
 8001394:	51008108 	.word	0x51008108
 8001398:	52004000 	.word	0x52004000

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013a0:	f7ff ff74 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a6:	490d      	ldr	r1, [pc, #52]	@ (80013dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013bc:	4c0a      	ldr	r4, [pc, #40]	@ (80013e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ca:	f006 fc7d 	bl	8007cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff f94f 	bl	8000670 <main>
  bx  lr
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013dc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80013e0:	0800864c 	.word	0x0800864c
  ldr r2, =_sbss
 80013e4:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80013e8:	2400099c 	.word	0x2400099c

080013ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC3_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f6:	2003      	movs	r0, #3
 80013f8:	f000 f9a0 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013fc:	f001 ff98 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 8001400:	4602      	mov	r2, r0
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_Init+0x68>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	0a1b      	lsrs	r3, r3, #8
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	4913      	ldr	r1, [pc, #76]	@ (800145c <HAL_Init+0x6c>)
 800140e:	5ccb      	ldrb	r3, [r1, r3]
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
 8001418:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_Init+0x68>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <HAL_Init+0x6c>)
 8001424:	5cd3      	ldrb	r3, [r2, r3]
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
 8001430:	4a0b      	ldr	r2, [pc, #44]	@ (8001460 <HAL_Init+0x70>)
 8001432:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001434:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_Init+0x74>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f814 	bl	8001468 <HAL_InitTick>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e002      	b.n	8001450 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800144a:	f7ff fc83 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	58024400 	.word	0x58024400
 800145c:	080085d0 	.word	0x080085d0
 8001460:	2400001c 	.word	0x2400001c
 8001464:	24000018 	.word	0x24000018

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001470:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <HAL_InitTick+0x60>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e021      	b.n	80014c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <HAL_InitTick+0x64>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <HAL_InitTick+0x60>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f985 	bl	80017a2 <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e00e      	b.n	80014c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d80a      	bhi.n	80014be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f000 f94f 	bl	8001752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b4:	4a06      	ldr	r2, [pc, #24]	@ (80014d0 <HAL_InitTick+0x68>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	24000024 	.word	0x24000024
 80014cc:	24000018 	.word	0x24000018
 80014d0:	24000020 	.word	0x24000020

080014d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	@ (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	24000024 	.word	0x24000024
 80014f8:	24000850 	.word	0x24000850

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	24000850 	.word	0x24000850

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <HAL_Delay+0x44>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffde 	bl	80014fc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	24000024 	.word	0x24000024

0800155c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001560:	4b03      	ldr	r3, [pc, #12]	@ (8001570 <HAL_GetREVID+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	0c1b      	lsrs	r3, r3, #16
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	5c001000 	.word	0x5c001000

08001574 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001584:	4904      	ldr	r1, [pc, #16]	@ (8001598 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	58000400 	.word	0x58000400

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <__NVIC_SetPriorityGrouping+0x40>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <__NVIC_SetPriorityGrouping+0x40>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00
 80015e0:	05fa0000 	.word	0x05fa0000

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4907      	ldr	r1, [pc, #28]	@ (8001638 <__NVIC_EnableIRQ+0x38>)
 800161a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	@ (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	@ (800168c <__NVIC_SetPriority+0x50>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	@ 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	@ 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f7ff ff8e 	bl	800163c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff29 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff40 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff90 	bl	8001690 <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5f 	bl	800163c <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff33 	bl	8001600 <__NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffa4 	bl	80016f8 <SysTick_Config>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0e3      	b.n	8001996 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d106      	bne.n	80017e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2223      	movs	r2, #35	@ 0x23
 80017dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fad1 	bl	8000d88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b6e      	ldr	r3, [pc, #440]	@ (80019a0 <HAL_ETH_Init+0x1e4>)
 80017e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017ec:	4a6c      	ldr	r2, [pc, #432]	@ (80019a0 <HAL_ETH_Init+0x1e4>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017f6:	4b6a      	ldr	r3, [pc, #424]	@ (80019a0 <HAL_ETH_Init+0x1e4>)
 80017f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7a1b      	ldrb	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d103      	bne.n	8001814 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff feb1 	bl	8001574 <HAL_SYSCFG_ETHInterfaceSelect>
 8001812:	e003      	b.n	800181c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001814:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001818:	f7ff feac 	bl	8001574 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800181c:	4b61      	ldr	r3, [pc, #388]	@ (80019a4 <HAL_ETH_Init+0x1e8>)
 800181e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001836:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001838:	f7ff fe60 	bl	80014fc <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800183e:	e011      	b.n	8001864 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001840:	f7ff fe5c 	bl	80014fc <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800184e:	d909      	bls.n	8001864 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2204      	movs	r2, #4
 8001854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	22e0      	movs	r2, #224	@ 0xe0
 800185c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e098      	b.n	8001996 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1e4      	bne.n	8001840 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f89e 	bl	80019b8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800187c:	f001 fed2 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8001880:	4603      	mov	r3, r0
 8001882:	4a49      	ldr	r2, [pc, #292]	@ (80019a8 <HAL_ETH_Init+0x1ec>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	0c9a      	lsrs	r2, r3, #18
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3a01      	subs	r2, #1
 8001890:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fa81 	bl	8001d9c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80018a6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018b6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	22e0      	movs	r2, #224	@ 0xe0
 80018d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e05d      	b.n	8001996 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018e6:	4b31      	ldr	r3, [pc, #196]	@ (80019ac <HAL_ETH_Init+0x1f0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6952      	ldr	r2, [r2, #20]
 80018ee:	0051      	lsls	r1, r2, #1
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	430b      	orrs	r3, r1
 80018f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018fa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fae9 	bl	8001ed6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fb2f 	bl	8001f68 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	3305      	adds	r3, #5
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	021a      	lsls	r2, r3, #8
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	3304      	adds	r3, #4
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	3303      	adds	r3, #3
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	061a      	lsls	r2, r3, #24
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	3302      	adds	r3, #2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	041b      	lsls	r3, r3, #16
 800193c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	3301      	adds	r3, #1
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001948:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001956:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001958:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_ETH_Init+0x1f4>)
 800196a:	430b      	orrs	r3, r1
 800196c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <HAL_ETH_Init+0x1f8>)
 800197e:	430b      	orrs	r3, r1
 8001980:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2210      	movs	r2, #16
 8001990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58000400 	.word	0x58000400
 80019a8:	431bde83 	.word	0x431bde83
 80019ac:	ffff8001 	.word	0xffff8001
 80019b0:	0c020060 	.word	0x0c020060
 80019b4:	0c20c000 	.word	0x0c20c000

080019b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80019d2:	f001 fe27 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 80019d6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4a1a      	ldr	r2, [pc, #104]	@ (8001a44 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d804      	bhi.n	80019ea <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e022      	b.n	8001a30 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	4a16      	ldr	r2, [pc, #88]	@ (8001a48 <HAL_ETH_SetMDIOClockRange+0x90>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d204      	bcs.n	80019fc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e019      	b.n	8001a30 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4a13      	ldr	r2, [pc, #76]	@ (8001a4c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d915      	bls.n	8001a30 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4a12      	ldr	r2, [pc, #72]	@ (8001a50 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d804      	bhi.n	8001a16 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e00c      	b.n	8001a30 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d804      	bhi.n	8001a28 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e003      	b.n	8001a30 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	02160ebf 	.word	0x02160ebf
 8001a48:	03938700 	.word	0x03938700
 8001a4c:	05f5e0ff 	.word	0x05f5e0ff
 8001a50:	08f0d17f 	.word	0x08f0d17f
 8001a54:	0ee6b27f 	.word	0x0ee6b27f

08001a58 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001a6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	791b      	ldrb	r3, [r3, #4]
 8001a70:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001a72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	7b1b      	ldrb	r3, [r3, #12]
 8001a78:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	7b5b      	ldrb	r3, [r3, #13]
 8001a80:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	7b9b      	ldrb	r3, [r3, #14]
 8001a88:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	7bdb      	ldrb	r3, [r3, #15]
 8001a90:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a92:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	7c12      	ldrb	r2, [r2, #16]
 8001a98:	2a00      	cmp	r2, #0
 8001a9a:	d102      	bne.n	8001aa2 <ETH_SetMACConfig+0x4a>
 8001a9c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001aa0:	e000      	b.n	8001aa4 <ETH_SetMACConfig+0x4c>
 8001aa2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001aa4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	7c52      	ldrb	r2, [r2, #17]
 8001aaa:	2a00      	cmp	r2, #0
 8001aac:	d102      	bne.n	8001ab4 <ETH_SetMACConfig+0x5c>
 8001aae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ab2:	e000      	b.n	8001ab6 <ETH_SetMACConfig+0x5e>
 8001ab4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ab6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	7c9b      	ldrb	r3, [r3, #18]
 8001abc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001abe:	431a      	orrs	r2, r3
               macconf->Speed |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001ac4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001aca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	7f1b      	ldrb	r3, [r3, #28]
 8001ad0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001ad2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	7f5b      	ldrb	r3, [r3, #29]
 8001ad8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001ada:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	7f92      	ldrb	r2, [r2, #30]
 8001ae0:	2a00      	cmp	r2, #0
 8001ae2:	d102      	bne.n	8001aea <ETH_SetMACConfig+0x92>
 8001ae4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ae8:	e000      	b.n	8001aec <ETH_SetMACConfig+0x94>
 8001aea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001aec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	7fdb      	ldrb	r3, [r3, #31]
 8001af2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001af4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d102      	bne.n	8001b06 <ETH_SetMACConfig+0xae>
 8001b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b04:	e000      	b.n	8001b08 <ETH_SetMACConfig+0xb0>
 8001b06:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b08:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b16:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b18:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b56      	ldr	r3, [pc, #344]	@ (8001c84 <ETH_SetMACConfig+0x22c>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	68f9      	ldr	r1, [r7, #12]
 8001b32:	430b      	orrs	r3, r1
 8001b34:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b3a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b42:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b4c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b56:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001b60:	2a00      	cmp	r2, #0
 8001b62:	d102      	bne.n	8001b6a <ETH_SetMACConfig+0x112>
 8001b64:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b68:	e000      	b.n	8001b6c <ETH_SetMACConfig+0x114>
 8001b6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b6c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4b42      	ldr	r3, [pc, #264]	@ (8001c88 <ETH_SetMACConfig+0x230>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	430b      	orrs	r3, r1
 8001b88:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b90:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8001c8c <ETH_SetMACConfig+0x234>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	430b      	orrs	r3, r1
 8001bac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001bb4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001bc2:	2a00      	cmp	r2, #0
 8001bc4:	d101      	bne.n	8001bca <ETH_SetMACConfig+0x172>
 8001bc6:	2280      	movs	r2, #128	@ 0x80
 8001bc8:	e000      	b.n	8001bcc <ETH_SetMACConfig+0x174>
 8001bca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001bcc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001bde:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001be2:	4013      	ands	r3, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	68f9      	ldr	r1, [r7, #12]
 8001bea:	430b      	orrs	r3, r1
 8001bec:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001bf4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001bfc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c0a:	f023 0103 	bic.w	r1, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001c22:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	d101      	bne.n	8001c46 <ETH_SetMACConfig+0x1ee>
 8001c42:	2240      	movs	r2, #64	@ 0x40
 8001c44:	e000      	b.n	8001c48 <ETH_SetMACConfig+0x1f0>
 8001c46:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c48:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001c50:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001c5a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001c68:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	00048083 	.word	0x00048083
 8001c88:	c0f88000 	.word	0xc0f88000
 8001c8c:	fffffef0 	.word	0xfffffef0

08001c90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <ETH_SetDMAConfig+0xf8>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	6811      	ldr	r1, [r2, #0]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cb6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	791b      	ldrb	r3, [r3, #4]
 8001cbc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cc2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	7b1b      	ldrb	r3, [r3, #12]
 8001cc8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <ETH_SetDMAConfig+0xfc>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	68f9      	ldr	r1, [r7, #12]
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ce8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7b5b      	ldrb	r3, [r3, #13]
 8001cee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d00:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001d04:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <ETH_SetDMAConfig+0x100>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	68f9      	ldr	r1, [r7, #12]
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d14:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	7d1b      	ldrb	r3, [r3, #20]
 8001d20:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d22:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	7f5b      	ldrb	r3, [r3, #29]
 8001d28:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d36:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001d3a:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <ETH_SetDMAConfig+0x104>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	68f9      	ldr	r1, [r7, #12]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d4a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	7f1b      	ldrb	r3, [r3, #28]
 8001d52:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d64:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <ETH_SetDMAConfig+0x108>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	68f9      	ldr	r1, [r7, #12]
 8001d72:	430b      	orrs	r3, r1
 8001d74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d78:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	ffff87fd 	.word	0xffff87fd
 8001d8c:	ffff2ffe 	.word	0xffff2ffe
 8001d90:	fffec000 	.word	0xfffec000
 8001d94:	ffc0efef 	.word	0xffc0efef
 8001d98:	7fc0ffff 	.word	0x7fc0ffff

08001d9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b0a4      	sub	sp, #144	@ 0x90
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001daa:	2300      	movs	r3, #0
 8001dac:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001dd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ddc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001df4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001df8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e16:	2300      	movs	r3, #0
 8001e18:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e34:	2320      	movs	r3, #32
 8001e36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e46:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e50:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e76:	2300      	movs	r3, #0
 8001e78:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e84:	4619      	mov	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fde6 	bl	8001a58 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e90:	2301      	movs	r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ea6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001eaa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001eb0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001eb4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001ebc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001ec0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff fee1 	bl	8001c90 <ETH_SetDMAConfig>
}
 8001ece:	bf00      	nop
 8001ed0:	3790      	adds	r7, #144	@ 0x90
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e01d      	b.n	8001f20 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68d9      	ldr	r1, [r3, #12]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	3206      	adds	r2, #6
 8001f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d9de      	bls.n	8001ee4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f34:	461a      	mov	r2, r3
 8001f36:	2303      	movs	r3, #3
 8001f38:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f48:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f58:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	e023      	b.n	8001fbe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6919      	ldr	r1, [r3, #16]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2200      	movs	r2, #0
 8001f92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	3212      	adds	r2, #18
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d9d8      	bls.n	8001f76 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fea:	461a      	mov	r2, r3
 8001fec:	2303      	movs	r3, #3
 8001fee:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ffe:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002012:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002032:	4b89      	ldr	r3, [pc, #548]	@ (8002258 <HAL_GPIO_Init+0x234>)
 8002034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002036:	e194      	b.n	8002362 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8186 	beq.w	800235c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d005      	beq.n	8002068 <HAL_GPIO_Init+0x44>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d130      	bne.n	80020ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800209e:	2201      	movs	r2, #1
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f003 0201 	and.w	r2, r3, #1
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d017      	beq.n	8002106 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d123      	bne.n	800215a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	69b9      	ldr	r1, [r7, #24]
 8002156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0203 	and.w	r2, r3, #3
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80e0 	beq.w	800235c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219c:	4b2f      	ldr	r3, [pc, #188]	@ (800225c <HAL_GPIO_Init+0x238>)
 800219e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021a2:	4a2e      	ldr	r2, [pc, #184]	@ (800225c <HAL_GPIO_Init+0x238>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021ac:	4b2b      	ldr	r3, [pc, #172]	@ (800225c <HAL_GPIO_Init+0x238>)
 80021ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ba:	4a29      	ldr	r2, [pc, #164]	@ (8002260 <HAL_GPIO_Init+0x23c>)
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a20      	ldr	r2, [pc, #128]	@ (8002264 <HAL_GPIO_Init+0x240>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d052      	beq.n	800228c <HAL_GPIO_Init+0x268>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <HAL_GPIO_Init+0x244>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d031      	beq.n	8002252 <HAL_GPIO_Init+0x22e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1e      	ldr	r2, [pc, #120]	@ (800226c <HAL_GPIO_Init+0x248>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d02b      	beq.n	800224e <HAL_GPIO_Init+0x22a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002270 <HAL_GPIO_Init+0x24c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d025      	beq.n	800224a <HAL_GPIO_Init+0x226>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a1c      	ldr	r2, [pc, #112]	@ (8002274 <HAL_GPIO_Init+0x250>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01f      	beq.n	8002246 <HAL_GPIO_Init+0x222>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1b      	ldr	r2, [pc, #108]	@ (8002278 <HAL_GPIO_Init+0x254>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0x21e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a1a      	ldr	r2, [pc, #104]	@ (800227c <HAL_GPIO_Init+0x258>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x21a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a19      	ldr	r2, [pc, #100]	@ (8002280 <HAL_GPIO_Init+0x25c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x216>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a18      	ldr	r2, [pc, #96]	@ (8002284 <HAL_GPIO_Init+0x260>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x212>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <HAL_GPIO_Init+0x264>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x20e>
 800222e:	2309      	movs	r3, #9
 8002230:	e02d      	b.n	800228e <HAL_GPIO_Init+0x26a>
 8002232:	230a      	movs	r3, #10
 8002234:	e02b      	b.n	800228e <HAL_GPIO_Init+0x26a>
 8002236:	2308      	movs	r3, #8
 8002238:	e029      	b.n	800228e <HAL_GPIO_Init+0x26a>
 800223a:	2307      	movs	r3, #7
 800223c:	e027      	b.n	800228e <HAL_GPIO_Init+0x26a>
 800223e:	2306      	movs	r3, #6
 8002240:	e025      	b.n	800228e <HAL_GPIO_Init+0x26a>
 8002242:	2305      	movs	r3, #5
 8002244:	e023      	b.n	800228e <HAL_GPIO_Init+0x26a>
 8002246:	2304      	movs	r3, #4
 8002248:	e021      	b.n	800228e <HAL_GPIO_Init+0x26a>
 800224a:	2303      	movs	r3, #3
 800224c:	e01f      	b.n	800228e <HAL_GPIO_Init+0x26a>
 800224e:	2302      	movs	r3, #2
 8002250:	e01d      	b.n	800228e <HAL_GPIO_Init+0x26a>
 8002252:	2301      	movs	r3, #1
 8002254:	e01b      	b.n	800228e <HAL_GPIO_Init+0x26a>
 8002256:	bf00      	nop
 8002258:	58000080 	.word	0x58000080
 800225c:	58024400 	.word	0x58024400
 8002260:	58000400 	.word	0x58000400
 8002264:	58020000 	.word	0x58020000
 8002268:	58020400 	.word	0x58020400
 800226c:	58020800 	.word	0x58020800
 8002270:	58020c00 	.word	0x58020c00
 8002274:	58021000 	.word	0x58021000
 8002278:	58021400 	.word	0x58021400
 800227c:	58021800 	.word	0x58021800
 8002280:	58021c00 	.word	0x58021c00
 8002284:	58022000 	.word	0x58022000
 8002288:	58022400 	.word	0x58022400
 800228c:	2300      	movs	r3, #0
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	f002 0203 	and.w	r2, r2, #3
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	4093      	lsls	r3, r2
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800229e:	4938      	ldr	r1, [pc, #224]	@ (8002380 <HAL_GPIO_Init+0x35c>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002300:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	f47f ae63 	bne.w	8002038 <HAL_GPIO_Init+0x14>
  }
}
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	3724      	adds	r7, #36	@ 0x24
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	58000400 	.word	0x58000400

08002384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e001      	b.n	80023a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023d0:	e003      	b.n	80023da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	041a      	lsls	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023f8:	887a      	ldrh	r2, [r7, #2]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4013      	ands	r3, r2
 80023fe:	041a      	lsls	r2, r3, #16
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	43d9      	mvns	r1, r3
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	400b      	ands	r3, r1
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af02      	add	r7, sp, #8
 8002420:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0fe      	b.n	800262a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fe fe37 	bl	80010b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2203      	movs	r2, #3
 800244a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f005 f974 	bl	8007740 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7c1a      	ldrb	r2, [r3, #16]
 8002460:	f88d 2000 	strb.w	r2, [sp]
 8002464:	3304      	adds	r3, #4
 8002466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002468:	f005 f8f8 	bl	800765c <USB_CoreInit>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0d5      	b.n	800262a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f005 f96c 	bl	8007762 <USB_SetCurrentMode>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0c6      	b.n	800262a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e04a      	b.n	8002538 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3315      	adds	r3, #21
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3314      	adds	r3, #20
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	b298      	uxth	r0, r3
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	332e      	adds	r3, #46	@ 0x2e
 80024de:	4602      	mov	r2, r0
 80024e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3318      	adds	r3, #24
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	331c      	adds	r3, #28
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3320      	adds	r3, #32
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3324      	adds	r3, #36	@ 0x24
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	3301      	adds	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	791b      	ldrb	r3, [r3, #4]
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	429a      	cmp	r2, r3
 8002540:	d3af      	bcc.n	80024a2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e044      	b.n	80025d2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	3301      	adds	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	791b      	ldrb	r3, [r3, #4]
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d3b5      	bcc.n	8002548 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7c1a      	ldrb	r2, [r3, #16]
 80025e4:	f88d 2000 	strb.w	r2, [sp]
 80025e8:	3304      	adds	r3, #4
 80025ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ec:	f005 f906 	bl	80077fc <USB_DevInit>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e013      	b.n	800262a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7b1b      	ldrb	r3, [r3, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f80b 	bl	8002634 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f005 fac1 	bl	8007baa <USB_DevDisconnect>

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002662:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_PCDEx_ActivateLPM+0x44>)
 8002664:	4313      	orrs	r3, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	10000003 	.word	0x10000003

0800267c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002684:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <HAL_PWREx_ConfigSupply+0x70>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b04      	cmp	r3, #4
 800268e:	d00a      	beq.n	80026a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002690:	4b16      	ldr	r3, [pc, #88]	@ (80026ec <HAL_PWREx_ConfigSupply+0x70>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e01f      	b.n	80026e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e01d      	b.n	80026e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026a6:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_PWREx_ConfigSupply+0x70>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	490f      	ldr	r1, [pc, #60]	@ (80026ec <HAL_PWREx_ConfigSupply+0x70>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026b6:	f7fe ff21 	bl	80014fc <HAL_GetTick>
 80026ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026bc:	e009      	b.n	80026d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026be:	f7fe ff1d 	bl	80014fc <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026cc:	d901      	bls.n	80026d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e007      	b.n	80026e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_PWREx_ConfigSupply+0x70>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026de:	d1ee      	bne.n	80026be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	58024800 	.word	0x58024800

080026f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a04      	ldr	r2, [pc, #16]	@ (800270c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026fe:	60d3      	str	r3, [r2, #12]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	58024800 	.word	0x58024800

08002710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08c      	sub	sp, #48	@ 0x30
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f000 bc48 	b.w	8002fb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8088 	beq.w	8002842 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002732:	4b99      	ldr	r3, [pc, #612]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800273c:	4b96      	ldr	r3, [pc, #600]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002744:	2b10      	cmp	r3, #16
 8002746:	d007      	beq.n	8002758 <HAL_RCC_OscConfig+0x48>
 8002748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274a:	2b18      	cmp	r3, #24
 800274c:	d111      	bne.n	8002772 <HAL_RCC_OscConfig+0x62>
 800274e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d10c      	bne.n	8002772 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	4b8f      	ldr	r3, [pc, #572]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d06d      	beq.n	8002840 <HAL_RCC_OscConfig+0x130>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d169      	bne.n	8002840 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f000 bc21 	b.w	8002fb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x7a>
 800277c:	4b86      	ldr	r3, [pc, #536]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a85      	ldr	r2, [pc, #532]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	e02e      	b.n	80027e8 <HAL_RCC_OscConfig+0xd8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x9c>
 8002792:	4b81      	ldr	r3, [pc, #516]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a80      	ldr	r2, [pc, #512]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b7e      	ldr	r3, [pc, #504]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80027a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e01d      	b.n	80027e8 <HAL_RCC_OscConfig+0xd8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0xc0>
 80027b6:	4b78      	ldr	r3, [pc, #480]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a77      	ldr	r2, [pc, #476]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80027bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b75      	ldr	r3, [pc, #468]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a74      	ldr	r2, [pc, #464]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e00b      	b.n	80027e8 <HAL_RCC_OscConfig+0xd8>
 80027d0:	4b71      	ldr	r3, [pc, #452]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a70      	ldr	r2, [pc, #448]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80027d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b6e      	ldr	r3, [pc, #440]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6d      	ldr	r2, [pc, #436]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80027e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7fe fe84 	bl	80014fc <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f8:	f7fe fe80 	bl	80014fc <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	@ 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e3d4      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800280a:	4b63      	ldr	r3, [pc, #396]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe8>
 8002816:	e014      	b.n	8002842 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fe70 	bl	80014fc <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002820:	f7fe fe6c 	bl	80014fc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	@ 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e3c0      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002832:	4b59      	ldr	r3, [pc, #356]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x110>
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80ca 	beq.w	80029e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002850:	4b51      	ldr	r3, [pc, #324]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002858:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800285a:	4b4f      	ldr	r3, [pc, #316]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 800285c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_RCC_OscConfig+0x166>
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2b18      	cmp	r3, #24
 800286a:	d156      	bne.n	800291a <HAL_RCC_OscConfig+0x20a>
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d151      	bne.n	800291a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002876:	4b48      	ldr	r3, [pc, #288]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_RCC_OscConfig+0x17e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e392      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800288e:	4b42      	ldr	r3, [pc, #264]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 0219 	bic.w	r2, r3, #25
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	493f      	ldr	r1, [pc, #252]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fe2c 	bl	80014fc <HAL_GetTick>
 80028a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a8:	f7fe fe28 	bl	80014fc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e37c      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ba:	4b37      	ldr	r3, [pc, #220]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	f7fe fe49 	bl	800155c <HAL_GetREVID>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d817      	bhi.n	8002904 <HAL_RCC_OscConfig+0x1f4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b40      	cmp	r3, #64	@ 0x40
 80028da:	d108      	bne.n	80028ee <HAL_RCC_OscConfig+0x1de>
 80028dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80028e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ec:	e07a      	b.n	80029e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	031b      	lsls	r3, r3, #12
 80028fc:	4926      	ldr	r1, [pc, #152]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002902:	e06f      	b.n	80029e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b24      	ldr	r3, [pc, #144]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	061b      	lsls	r3, r3, #24
 8002912:	4921      	ldr	r1, [pc, #132]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002918:	e064      	b.n	80029e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d047      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002922:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 0219 	bic.w	r2, r3, #25
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	491a      	ldr	r1, [pc, #104]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fde2 	bl	80014fc <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293c:	f7fe fdde 	bl	80014fc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e332      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	f7fe fdff 	bl	800155c <HAL_GetREVID>
 800295e:	4603      	mov	r3, r0
 8002960:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002964:	4293      	cmp	r3, r2
 8002966:	d819      	bhi.n	800299c <HAL_RCC_OscConfig+0x28c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b40      	cmp	r3, #64	@ 0x40
 800296e:	d108      	bne.n	8002982 <HAL_RCC_OscConfig+0x272>
 8002970:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002978:	4a07      	ldr	r2, [pc, #28]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 800297a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800297e:	6053      	str	r3, [r2, #4]
 8002980:	e030      	b.n	80029e4 <HAL_RCC_OscConfig+0x2d4>
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	031b      	lsls	r3, r3, #12
 8002990:	4901      	ldr	r1, [pc, #4]	@ (8002998 <HAL_RCC_OscConfig+0x288>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
 8002996:	e025      	b.n	80029e4 <HAL_RCC_OscConfig+0x2d4>
 8002998:	58024400 	.word	0x58024400
 800299c:	4b9a      	ldr	r3, [pc, #616]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	061b      	lsls	r3, r3, #24
 80029aa:	4997      	ldr	r1, [pc, #604]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
 80029b0:	e018      	b.n	80029e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	4b95      	ldr	r3, [pc, #596]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a94      	ldr	r2, [pc, #592]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7fe fd9d 	bl	80014fc <HAL_GetTick>
 80029c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c6:	f7fe fd99 	bl	80014fc <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e2ed      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029d8:	4b8b      	ldr	r3, [pc, #556]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f0      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a9 	beq.w	8002b44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f2:	4b85      	ldr	r3, [pc, #532]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029fc:	4b82      	ldr	r3, [pc, #520]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d007      	beq.n	8002a18 <HAL_RCC_OscConfig+0x308>
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b18      	cmp	r3, #24
 8002a0c:	d13a      	bne.n	8002a84 <HAL_RCC_OscConfig+0x374>
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d135      	bne.n	8002a84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a18:	4b7b      	ldr	r3, [pc, #492]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_OscConfig+0x320>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2b80      	cmp	r3, #128	@ 0x80
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e2c1      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a30:	f7fe fd94 	bl	800155c <HAL_GetREVID>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d817      	bhi.n	8002a6e <HAL_RCC_OscConfig+0x35e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d108      	bne.n	8002a58 <HAL_RCC_OscConfig+0x348>
 8002a46:	4b70      	ldr	r3, [pc, #448]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a56:	e075      	b.n	8002b44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a58:	4b6b      	ldr	r3, [pc, #428]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	069b      	lsls	r3, r3, #26
 8002a66:	4968      	ldr	r1, [pc, #416]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a6c:	e06a      	b.n	8002b44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a6e:	4b66      	ldr	r3, [pc, #408]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	061b      	lsls	r3, r3, #24
 8002a7c:	4962      	ldr	r1, [pc, #392]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a82:	e05f      	b.n	8002b44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d042      	beq.n	8002b12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a5d      	ldr	r2, [pc, #372]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fd30 	bl	80014fc <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fd2c 	bl	80014fc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e280      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ab2:	4b55      	ldr	r3, [pc, #340]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002abe:	f7fe fd4d 	bl	800155c <HAL_GetREVID>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d817      	bhi.n	8002afc <HAL_RCC_OscConfig+0x3ec>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d108      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3d6>
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002adc:	4a4a      	ldr	r2, [pc, #296]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ae2:	6053      	str	r3, [r2, #4]
 8002ae4:	e02e      	b.n	8002b44 <HAL_RCC_OscConfig+0x434>
 8002ae6:	4b48      	ldr	r3, [pc, #288]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	069b      	lsls	r3, r3, #26
 8002af4:	4944      	ldr	r1, [pc, #272]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
 8002afa:	e023      	b.n	8002b44 <HAL_RCC_OscConfig+0x434>
 8002afc:	4b42      	ldr	r3, [pc, #264]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	493f      	ldr	r1, [pc, #252]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60cb      	str	r3, [r1, #12]
 8002b10:	e018      	b.n	8002b44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b12:	4b3d      	ldr	r3, [pc, #244]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a3c      	ldr	r2, [pc, #240]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002b18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fced 	bl	80014fc <HAL_GetTick>
 8002b22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b26:	f7fe fce9 	bl	80014fc <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e23d      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b38:	4b33      	ldr	r3, [pc, #204]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d036      	beq.n	8002bbe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d019      	beq.n	8002b8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b58:	4b2b      	ldr	r3, [pc, #172]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe fcca 	bl	80014fc <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fcc6 	bl	80014fc <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e21a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b7e:	4b22      	ldr	r3, [pc, #136]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x45c>
 8002b8a:	e018      	b.n	8002bbe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b90:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fcb0 	bl	80014fc <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fcac 	bl	80014fc <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e200      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d039      	beq.n	8002c3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bde:	f7fe fc8d 	bl	80014fc <HAL_GetTick>
 8002be2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be6:	f7fe fc89 	bl	80014fc <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1dd      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bf8:	4b03      	ldr	r3, [pc, #12]	@ (8002c08 <HAL_RCC_OscConfig+0x4f8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x4d6>
 8002c04:	e01b      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
 8002c06:	bf00      	nop
 8002c08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c0c:	4b9b      	ldr	r3, [pc, #620]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a9a      	ldr	r2, [pc, #616]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002c12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c18:	f7fe fc70 	bl	80014fc <HAL_GetTick>
 8002c1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c20:	f7fe fc6c 	bl	80014fc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e1c0      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c32:	4b92      	ldr	r3, [pc, #584]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8081 	beq.w	8002d4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e80 <HAL_RCC_OscConfig+0x770>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a8b      	ldr	r2, [pc, #556]	@ (8002e80 <HAL_RCC_OscConfig+0x770>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c58:	f7fe fc50 	bl	80014fc <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe fc4c 	bl	80014fc <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	@ 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e1a0      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c72:	4b83      	ldr	r3, [pc, #524]	@ (8002e80 <HAL_RCC_OscConfig+0x770>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d106      	bne.n	8002c94 <HAL_RCC_OscConfig+0x584>
 8002c86:	4b7d      	ldr	r3, [pc, #500]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c92:	e02d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x5e0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x5a6>
 8002c9c:	4b77      	ldr	r3, [pc, #476]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca0:	4a76      	ldr	r2, [pc, #472]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca8:	4b74      	ldr	r3, [pc, #464]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	4a73      	ldr	r2, [pc, #460]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002cae:	f023 0304 	bic.w	r3, r3, #4
 8002cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb4:	e01c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x5e0>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x5c8>
 8002cbe:	4b6f      	ldr	r3, [pc, #444]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cca:	4b6c      	ldr	r3, [pc, #432]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	4a6b      	ldr	r2, [pc, #428]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x5e0>
 8002cd8:	4b68      	ldr	r3, [pc, #416]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	4a67      	ldr	r2, [pc, #412]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce4:	4b65      	ldr	r3, [pc, #404]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	4a64      	ldr	r2, [pc, #400]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002cea:	f023 0304 	bic.w	r3, r3, #4
 8002cee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fc00 	bl	80014fc <HAL_GetTick>
 8002cfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe fbfc 	bl	80014fc <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e14e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d16:	4b59      	ldr	r3, [pc, #356]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ee      	beq.n	8002d00 <HAL_RCC_OscConfig+0x5f0>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fbea 	bl	80014fc <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fbe6 	bl	80014fc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e138      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d42:	4b4e      	ldr	r3, [pc, #312]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ee      	bne.n	8002d2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 812d 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d58:	4b48      	ldr	r3, [pc, #288]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d60:	2b18      	cmp	r3, #24
 8002d62:	f000 80bd 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	f040 809e 	bne.w	8002eac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d70:	4b42      	ldr	r3, [pc, #264]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a41      	ldr	r2, [pc, #260]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fbbe 	bl	80014fc <HAL_GetTick>
 8002d80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fbba 	bl	80014fc <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e10e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d96:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da2:	4b36      	ldr	r3, [pc, #216]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002da4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002da6:	4b37      	ldr	r3, [pc, #220]	@ (8002e84 <HAL_RCC_OscConfig+0x774>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	430a      	orrs	r2, r1
 8002db6:	4931      	ldr	r1, [pc, #196]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	628b      	str	r3, [r1, #40]	@ 0x28
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	025b      	lsls	r3, r3, #9
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	3b01      	subs	r3, #1
 8002de6:	061b      	lsls	r3, r3, #24
 8002de8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002dec:	4923      	ldr	r1, [pc, #140]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002df2:	4b22      	ldr	r3, [pc, #136]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	4a21      	ldr	r2, [pc, #132]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e02:	4b21      	ldr	r3, [pc, #132]	@ (8002e88 <HAL_RCC_OscConfig+0x778>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e0a:	00d2      	lsls	r2, r2, #3
 8002e0c:	491b      	ldr	r1, [pc, #108]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e16:	f023 020c 	bic.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	4917      	ldr	r1, [pc, #92]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e24:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	f023 0202 	bic.w	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e30:	4912      	ldr	r1, [pc, #72]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e36:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	4a10      	ldr	r2, [pc, #64]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e42:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e46:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e5a:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	4a07      	ldr	r2, [pc, #28]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e66:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <HAL_RCC_OscConfig+0x76c>)
 8002e6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fe fb43 	bl	80014fc <HAL_GetTick>
 8002e76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e78:	e011      	b.n	8002e9e <HAL_RCC_OscConfig+0x78e>
 8002e7a:	bf00      	nop
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	58024800 	.word	0x58024800
 8002e84:	fffffc0c 	.word	0xfffffc0c
 8002e88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fb36 	bl	80014fc <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e08a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e9e:	4b47      	ldr	r3, [pc, #284]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x77c>
 8002eaa:	e082      	b.n	8002fb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eac:	4b43      	ldr	r3, [pc, #268]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a42      	ldr	r2, [pc, #264]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fb20 	bl	80014fc <HAL_GetTick>
 8002ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fe fb1c 	bl	80014fc <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e070      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x7b0>
 8002ede:	e068      	b.n	8002fb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ee0:	4b36      	ldr	r3, [pc, #216]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ee6:	4b35      	ldr	r3, [pc, #212]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d031      	beq.n	8002f58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f003 0203 	and.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d12a      	bne.n	8002f58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d122      	bne.n	8002f58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d11a      	bne.n	8002f58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	0a5b      	lsrs	r3, r3, #9
 8002f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d111      	bne.n	8002f58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	0c1b      	lsrs	r3, r3, #16
 8002f38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d108      	bne.n	8002f58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	0e1b      	lsrs	r3, r3, #24
 8002f4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e02b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f5c:	4b17      	ldr	r3, [pc, #92]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f60:	08db      	lsrs	r3, r3, #3
 8002f62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d01f      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f72:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f7e:	f7fe fabd 	bl	80014fc <HAL_GetTick>
 8002f82:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f84:	bf00      	nop
 8002f86:	f7fe fab9 	bl	80014fc <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d0f9      	beq.n	8002f86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f92:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f96:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <HAL_RCC_OscConfig+0x8b0>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f9e:	00d2      	lsls	r2, r2, #3
 8002fa0:	4906      	ldr	r1, [pc, #24]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002fa6:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <HAL_RCC_OscConfig+0x8ac>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3730      	adds	r7, #48	@ 0x30
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	ffff0007 	.word	0xffff0007

08002fc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e19c      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b8a      	ldr	r3, [pc, #552]	@ (8003204 <HAL_RCC_ClockConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d910      	bls.n	8003008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b87      	ldr	r3, [pc, #540]	@ (8003204 <HAL_RCC_ClockConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 020f 	bic.w	r2, r3, #15
 8002fee:	4985      	ldr	r1, [pc, #532]	@ (8003204 <HAL_RCC_ClockConfig+0x240>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b83      	ldr	r3, [pc, #524]	@ (8003204 <HAL_RCC_ClockConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e184      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	4b7b      	ldr	r3, [pc, #492]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003020:	429a      	cmp	r2, r3
 8003022:	d908      	bls.n	8003036 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003024:	4b78      	ldr	r3, [pc, #480]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	4975      	ldr	r1, [pc, #468]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003032:	4313      	orrs	r3, r2
 8003034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d010      	beq.n	8003064 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	4b70      	ldr	r3, [pc, #448]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800304e:	429a      	cmp	r2, r3
 8003050:	d908      	bls.n	8003064 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003052:	4b6d      	ldr	r3, [pc, #436]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	496a      	ldr	r1, [pc, #424]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003060:	4313      	orrs	r3, r2
 8003062:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d010      	beq.n	8003092 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	4b64      	ldr	r3, [pc, #400]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800307c:	429a      	cmp	r2, r3
 800307e:	d908      	bls.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003080:	4b61      	ldr	r3, [pc, #388]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	495e      	ldr	r1, [pc, #376]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 800308e:	4313      	orrs	r3, r2
 8003090:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d010      	beq.n	80030c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	4b59      	ldr	r3, [pc, #356]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d908      	bls.n	80030c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030ae:	4b56      	ldr	r3, [pc, #344]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	4953      	ldr	r1, [pc, #332]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	429a      	cmp	r2, r3
 80030da:	d908      	bls.n	80030ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f023 020f 	bic.w	r2, r3, #15
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4947      	ldr	r1, [pc, #284]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d055      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030fa:	4b43      	ldr	r3, [pc, #268]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4940      	ldr	r1, [pc, #256]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003108:	4313      	orrs	r3, r2
 800310a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d107      	bne.n	8003124 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003114:	4b3c      	ldr	r3, [pc, #240]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d121      	bne.n	8003164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0f6      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d107      	bne.n	800313c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800312c:	4b36      	ldr	r3, [pc, #216]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d115      	bne.n	8003164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0ea      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003144:	4b30      	ldr	r3, [pc, #192]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0de      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003154:	4b2c      	ldr	r3, [pc, #176]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0d6      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003164:	4b28      	ldr	r3, [pc, #160]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f023 0207 	bic.w	r2, r3, #7
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4925      	ldr	r1, [pc, #148]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003172:	4313      	orrs	r3, r2
 8003174:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003176:	f7fe f9c1 	bl	80014fc <HAL_GetTick>
 800317a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317c:	e00a      	b.n	8003194 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317e:	f7fe f9bd 	bl	80014fc <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0be      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003194:	4b1c      	ldr	r3, [pc, #112]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d1eb      	bne.n	800317e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d010      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	4b14      	ldr	r3, [pc, #80]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	429a      	cmp	r2, r3
 80031c0:	d208      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c2:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f023 020f 	bic.w	r2, r3, #15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	490e      	ldr	r1, [pc, #56]	@ (8003208 <HAL_RCC_ClockConfig+0x244>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_RCC_ClockConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d214      	bcs.n	800320c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <HAL_RCC_ClockConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 020f 	bic.w	r2, r3, #15
 80031ea:	4906      	ldr	r1, [pc, #24]	@ (8003204 <HAL_RCC_ClockConfig+0x240>)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <HAL_RCC_ClockConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e086      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
 8003204:	52002000 	.word	0x52002000
 8003208:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d010      	beq.n	800323a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	4b3f      	ldr	r3, [pc, #252]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003224:	429a      	cmp	r2, r3
 8003226:	d208      	bcs.n	800323a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003228:	4b3c      	ldr	r3, [pc, #240]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	4939      	ldr	r1, [pc, #228]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 8003236:	4313      	orrs	r3, r2
 8003238:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d010      	beq.n	8003268 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	4b34      	ldr	r3, [pc, #208]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003252:	429a      	cmp	r2, r3
 8003254:	d208      	bcs.n	8003268 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003256:	4b31      	ldr	r3, [pc, #196]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	492e      	ldr	r1, [pc, #184]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 8003264:	4313      	orrs	r3, r2
 8003266:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	4b28      	ldr	r3, [pc, #160]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003280:	429a      	cmp	r2, r3
 8003282:	d208      	bcs.n	8003296 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003284:	4b25      	ldr	r3, [pc, #148]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4922      	ldr	r1, [pc, #136]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 8003292:	4313      	orrs	r3, r2
 8003294:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d010      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d208      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032b2:	4b1a      	ldr	r3, [pc, #104]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4917      	ldr	r1, [pc, #92]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032c4:	f000 f834 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b14      	ldr	r3, [pc, #80]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	4912      	ldr	r1, [pc, #72]	@ (8003320 <HAL_RCC_ClockConfig+0x35c>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032e2:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <HAL_RCC_ClockConfig+0x358>)
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003320 <HAL_RCC_ClockConfig+0x35c>)
 80032ec:	5cd3      	ldrb	r3, [r2, r3]
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003324 <HAL_RCC_ClockConfig+0x360>)
 80032fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003328 <HAL_RCC_ClockConfig+0x364>)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003302:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <HAL_RCC_ClockConfig+0x368>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe f8ae 	bl	8001468 <HAL_InitTick>
 800330c:	4603      	mov	r3, r0
 800330e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	58024400 	.word	0x58024400
 8003320:	080085d0 	.word	0x080085d0
 8003324:	2400001c 	.word	0x2400001c
 8003328:	24000018 	.word	0x24000018
 800332c:	24000020 	.word	0x24000020

08003330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	@ 0x24
 8003334:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003336:	4bb3      	ldr	r3, [pc, #716]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800333e:	2b18      	cmp	r3, #24
 8003340:	f200 8155 	bhi.w	80035ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003344:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	080033b1 	.word	0x080033b1
 8003350:	080035ef 	.word	0x080035ef
 8003354:	080035ef 	.word	0x080035ef
 8003358:	080035ef 	.word	0x080035ef
 800335c:	080035ef 	.word	0x080035ef
 8003360:	080035ef 	.word	0x080035ef
 8003364:	080035ef 	.word	0x080035ef
 8003368:	080035ef 	.word	0x080035ef
 800336c:	080033d7 	.word	0x080033d7
 8003370:	080035ef 	.word	0x080035ef
 8003374:	080035ef 	.word	0x080035ef
 8003378:	080035ef 	.word	0x080035ef
 800337c:	080035ef 	.word	0x080035ef
 8003380:	080035ef 	.word	0x080035ef
 8003384:	080035ef 	.word	0x080035ef
 8003388:	080035ef 	.word	0x080035ef
 800338c:	080033dd 	.word	0x080033dd
 8003390:	080035ef 	.word	0x080035ef
 8003394:	080035ef 	.word	0x080035ef
 8003398:	080035ef 	.word	0x080035ef
 800339c:	080035ef 	.word	0x080035ef
 80033a0:	080035ef 	.word	0x080035ef
 80033a4:	080035ef 	.word	0x080035ef
 80033a8:	080035ef 	.word	0x080035ef
 80033ac:	080033e3 	.word	0x080033e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033b0:	4b94      	ldr	r3, [pc, #592]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033bc:	4b91      	ldr	r3, [pc, #580]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	4a90      	ldr	r2, [pc, #576]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
 80033cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80033ce:	e111      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033d0:	4b8d      	ldr	r3, [pc, #564]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033d2:	61bb      	str	r3, [r7, #24]
      break;
 80033d4:	e10e      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80033d6:	4b8d      	ldr	r3, [pc, #564]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033d8:	61bb      	str	r3, [r7, #24]
      break;
 80033da:	e10b      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80033dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033de:	61bb      	str	r3, [r7, #24]
      break;
 80033e0:	e108      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033e2:	4b88      	ldr	r3, [pc, #544]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033ec:	4b85      	ldr	r3, [pc, #532]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033f8:	4b82      	ldr	r3, [pc, #520]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003402:	4b80      	ldr	r3, [pc, #512]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003406:	08db      	lsrs	r3, r3, #3
 8003408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80e1 	beq.w	80035e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b02      	cmp	r3, #2
 800342a:	f000 8083 	beq.w	8003534 <HAL_RCC_GetSysClockFreq+0x204>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b02      	cmp	r3, #2
 8003432:	f200 80a1 	bhi.w	8003578 <HAL_RCC_GetSysClockFreq+0x248>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x114>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d056      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003442:	e099      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003444:	4b6f      	ldr	r3, [pc, #444]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02d      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003450:	4b6c      	ldr	r3, [pc, #432]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	08db      	lsrs	r3, r3, #3
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	4a6b      	ldr	r2, [pc, #428]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
 8003460:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347a:	4b62      	ldr	r3, [pc, #392]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348a:	ed97 6a02 	vldr	s12, [r7, #8]
 800348e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003614 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800349e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80034aa:	e087      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003618 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034be:	4b51      	ldr	r3, [pc, #324]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80034d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034ee:	e065      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800361c <HAL_RCC_GetSysClockFreq+0x2ec>
 80034fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003502:	4b40      	ldr	r3, [pc, #256]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003512:	ed97 6a02 	vldr	s12, [r7, #8]
 8003516:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800351a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800351e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800352a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003532:	e043      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003620 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003546:	4b2f      	ldr	r3, [pc, #188]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003556:	ed97 6a02 	vldr	s12, [r7, #8]
 800355a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800355e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800356a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800356e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003576:	e021      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003582:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800361c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800358a:	4b1e      	ldr	r3, [pc, #120]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359a:	ed97 6a02 	vldr	s12, [r7, #8]
 800359e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035bc:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c0:	0a5b      	lsrs	r3, r3, #9
 80035c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035c6:	3301      	adds	r3, #1
 80035c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	ee07 3a90 	vmov	s15, r3
 80035d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80035d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e0:	ee17 3a90 	vmov	r3, s15
 80035e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80035e6:	e005      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
      break;
 80035ec:	e002      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80035ee:	4b07      	ldr	r3, [pc, #28]	@ (800360c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035f0:	61bb      	str	r3, [r7, #24]
      break;
 80035f2:	bf00      	nop
  }

  return sysclockfreq;
 80035f4:	69bb      	ldr	r3, [r7, #24]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	@ 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	58024400 	.word	0x58024400
 8003608:	03d09000 	.word	0x03d09000
 800360c:	003d0900 	.word	0x003d0900
 8003610:	007a1200 	.word	0x007a1200
 8003614:	46000000 	.word	0x46000000
 8003618:	4c742400 	.word	0x4c742400
 800361c:	4a742400 	.word	0x4a742400
 8003620:	4af42400 	.word	0x4af42400

08003624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800362a:	f7ff fe81 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b10      	ldr	r3, [pc, #64]	@ (8003674 <HAL_RCC_GetHCLKFreq+0x50>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	490f      	ldr	r1, [pc, #60]	@ (8003678 <HAL_RCC_GetHCLKFreq+0x54>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003648:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <HAL_RCC_GetHCLKFreq+0x50>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	4a09      	ldr	r2, [pc, #36]	@ (8003678 <HAL_RCC_GetHCLKFreq+0x54>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	4a07      	ldr	r2, [pc, #28]	@ (800367c <HAL_RCC_GetHCLKFreq+0x58>)
 8003660:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003662:	4a07      	ldr	r2, [pc, #28]	@ (8003680 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003668:	4b04      	ldr	r3, [pc, #16]	@ (800367c <HAL_RCC_GetHCLKFreq+0x58>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	58024400 	.word	0x58024400
 8003678:	080085d0 	.word	0x080085d0
 800367c:	2400001c 	.word	0x2400001c
 8003680:	24000018 	.word	0x24000018

08003684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003688:	f7ff ffcc 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4904      	ldr	r1, [pc, #16]	@ (80036ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	58024400 	.word	0x58024400
 80036ac:	080085d0 	.word	0x080085d0

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036b4:	f7ff ffb6 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4904      	ldr	r1, [pc, #16]	@ (80036d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	58024400 	.word	0x58024400
 80036d8:	080085d0 	.word	0x080085d0

080036dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e0:	b0ca      	sub	sp, #296	@ 0x128
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003700:	2500      	movs	r5, #0
 8003702:	ea54 0305 	orrs.w	r3, r4, r5
 8003706:	d049      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800370e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003712:	d02f      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003714:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003718:	d828      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800371a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800371e:	d01a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003720:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003724:	d822      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800372a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800372e:	d007      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003730:	e01c      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003732:	4bb8      	ldr	r3, [pc, #736]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	4ab7      	ldr	r2, [pc, #732]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800373c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800373e:	e01a      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	3308      	adds	r3, #8
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fc8f 	bl	800506c <RCCEx_PLL2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003754:	e00f      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	3328      	adds	r3, #40	@ 0x28
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fd36 	bl	80051d0 <RCCEx_PLL3_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800376a:	e004      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003772:	e000      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800377e:	4ba5      	ldr	r3, [pc, #660]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003782:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800378c:	4aa1      	ldr	r2, [pc, #644]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800378e:	430b      	orrs	r3, r1
 8003790:	6513      	str	r3, [r2, #80]	@ 0x50
 8003792:	e003      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80037a8:	f04f 0900 	mov.w	r9, #0
 80037ac:	ea58 0309 	orrs.w	r3, r8, r9
 80037b0:	d047      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d82a      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80037bc:	a201      	add	r2, pc, #4	@ (adr r2, 80037c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037d9 	.word	0x080037d9
 80037c8:	080037e7 	.word	0x080037e7
 80037cc:	080037fd 	.word	0x080037fd
 80037d0:	0800381b 	.word	0x0800381b
 80037d4:	0800381b 	.word	0x0800381b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	4a8d      	ldr	r2, [pc, #564]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037e4:	e01a      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ea:	3308      	adds	r3, #8
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fc3c 	bl	800506c <RCCEx_PLL2_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037fa:	e00f      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003800:	3328      	adds	r3, #40	@ 0x28
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fce3 	bl	80051d0 <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003810:	e004      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003818:	e000      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800381a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800381c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003824:	4b7b      	ldr	r3, [pc, #492]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003828:	f023 0107 	bic.w	r1, r3, #7
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003832:	4a78      	ldr	r2, [pc, #480]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003834:	430b      	orrs	r3, r1
 8003836:	6513      	str	r3, [r2, #80]	@ 0x50
 8003838:	e003      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800384e:	f04f 0b00 	mov.w	fp, #0
 8003852:	ea5a 030b 	orrs.w	r3, sl, fp
 8003856:	d04c      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003862:	d030      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003868:	d829      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800386a:	2bc0      	cmp	r3, #192	@ 0xc0
 800386c:	d02d      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800386e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003870:	d825      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003872:	2b80      	cmp	r3, #128	@ 0x80
 8003874:	d018      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003876:	2b80      	cmp	r3, #128	@ 0x80
 8003878:	d821      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800387e:	2b40      	cmp	r3, #64	@ 0x40
 8003880:	d007      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003882:	e01c      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003884:	4b63      	ldr	r3, [pc, #396]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	4a62      	ldr	r2, [pc, #392]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800388e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003890:	e01c      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003896:	3308      	adds	r3, #8
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fbe6 	bl	800506c <RCCEx_PLL2_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038a6:	e011      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	3328      	adds	r3, #40	@ 0x28
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fc8d 	bl	80051d0 <RCCEx_PLL3_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038bc:	e006      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c4:	e002      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038c6:	bf00      	nop
 80038c8:	e000      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80038e8:	e003      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80038fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003908:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d053      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800391a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800391e:	d035      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003920:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003924:	d82e      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003926:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800392a:	d031      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800392c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003930:	d828      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003932:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003936:	d01a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800393c:	d822      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003942:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003946:	d007      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003948:	e01c      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394a:	4b32      	ldr	r3, [pc, #200]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	4a31      	ldr	r2, [pc, #196]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003954:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003956:	e01c      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395c:	3308      	adds	r3, #8
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f001 fb83 	bl	800506c <RCCEx_PLL2_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800396c:	e011      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003972:	3328      	adds	r3, #40	@ 0x28
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f001 fc2a 	bl	80051d0 <RCCEx_PLL3_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003982:	e006      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800398a:	e002      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800399a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800399c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80039b0:	e003      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80039c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80039ca:	2300      	movs	r3, #0
 80039cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80039d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80039d4:	460b      	mov	r3, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d056      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039e6:	d038      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80039e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039ec:	d831      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039f2:	d034      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80039f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039f8:	d82b      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039fe:	d01d      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a04:	d825      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a10:	e01f      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a12:	bf00      	nop
 8003a14:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a18:	4ba2      	ldr	r3, [pc, #648]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	4aa1      	ldr	r2, [pc, #644]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a24:	e01c      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fb1c 	bl	800506c <RCCEx_PLL2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e011      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	3328      	adds	r3, #40	@ 0x28
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fbc3 	bl	80051d0 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a50:	e006      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a58:	e002      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a68:	4b8e      	ldr	r3, [pc, #568]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a78:	4a8a      	ldr	r2, [pc, #552]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a7e:	e003      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003a94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003a9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	d03a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aae:	2b30      	cmp	r3, #48	@ 0x30
 8003ab0:	d01f      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003ab2:	2b30      	cmp	r3, #48	@ 0x30
 8003ab4:	d819      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d815      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d019      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d111      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac6:	4b77      	ldr	r3, [pc, #476]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aca:	4a76      	ldr	r2, [pc, #472]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ad2:	e011      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	3308      	adds	r3, #8
 8003ada:	2102      	movs	r1, #2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 fac5 	bl	800506c <RCCEx_PLL2_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ae8:	e006      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003af0:	e002      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b00:	4b68      	ldr	r3, [pc, #416]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0e:	4a65      	ldr	r2, [pc, #404]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b10:	430b      	orrs	r3, r1
 8003b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b14:	e003      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003b2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003b34:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	d051      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b48:	d035      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b4e:	d82e      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b54:	d031      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b5a:	d828      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b60:	d01a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b66:	d822      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b70:	d007      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b72:	e01c      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b74:	4b4b      	ldr	r3, [pc, #300]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	4a4a      	ldr	r2, [pc, #296]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b80:	e01c      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	3308      	adds	r3, #8
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 fa6e 	bl	800506c <RCCEx_PLL2_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b96:	e011      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	3328      	adds	r3, #40	@ 0x28
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 fb15 	bl	80051d0 <RCCEx_PLL3_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bac:	e006      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bc4:	4b37      	ldr	r3, [pc, #220]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd2:	4a34      	ldr	r2, [pc, #208]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003bee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003bf8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d056      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c0c:	d033      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c12:	d82c      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c18:	d02f      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c1e:	d826      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c24:	d02b      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c2a:	d820      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c30:	d012      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c36:	d81a      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d022      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c40:	d115      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	3308      	adds	r3, #8
 8003c48:	2101      	movs	r1, #1
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 fa0e 	bl	800506c <RCCEx_PLL2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c56:	e015      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	3328      	adds	r3, #40	@ 0x28
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 fab5 	bl	80051d0 <RCCEx_PLL3_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c74:	e006      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c76:	bf00      	nop
 8003c78:	e004      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c7a:	bf00      	nop
 8003c7c:	e002      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c7e:	bf00      	nop
 8003c80:	e000      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10d      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c9a:	4a02      	ldr	r2, [pc, #8]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ca0:	e006      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003ca2:	bf00      	nop
 8003ca4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cc6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	d055      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cdc:	d033      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ce2:	d82c      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce8:	d02f      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cee:	d826      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cf0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cf4:	d02b      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003cf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cfa:	d820      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d00:	d012      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d06:	d81a      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d022      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d10:	d115      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d16:	3308      	adds	r3, #8
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 f9a6 	bl	800506c <RCCEx_PLL2_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d26:	e015      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	3328      	adds	r3, #40	@ 0x28
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 fa4d 	bl	80051d0 <RCCEx_PLL3_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d44:	e006      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d46:	bf00      	nop
 8003d48:	e004      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d4a:	bf00      	nop
 8003d4c:	e002      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d5c:	4ba3      	ldr	r3, [pc, #652]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d60:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d6c:	4a9f      	ldr	r2, [pc, #636]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d72:	e003      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003d88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003d92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d96:	460b      	mov	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	d037      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003da6:	d00e      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dac:	d816      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d018      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003db6:	d111      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db8:	4b8c      	ldr	r3, [pc, #560]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	4a8b      	ldr	r2, [pc, #556]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003dc4:	e00f      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	3308      	adds	r3, #8
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f001 f94c 	bl	800506c <RCCEx_PLL2_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003dda:	e004      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dee:	4b7f      	ldr	r3, [pc, #508]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfc:	4a7b      	ldr	r2, [pc, #492]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e02:	e003      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	d039      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d81c      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e36:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e79 	.word	0x08003e79
 8003e40:	08003e4d 	.word	0x08003e4d
 8003e44:	08003e5b 	.word	0x08003e5b
 8003e48:	08003e79 	.word	0x08003e79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e4c:	4b67      	ldr	r3, [pc, #412]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	4a66      	ldr	r2, [pc, #408]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e58:	e00f      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	3308      	adds	r3, #8
 8003e60:	2102      	movs	r1, #2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 f902 	bl	800506c <RCCEx_PLL2_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e6e:	e004      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e76:	e000      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e82:	4b5a      	ldr	r3, [pc, #360]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e86:	f023 0103 	bic.w	r1, r3, #3
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e90:	4a56      	ldr	r2, [pc, #344]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e92:	430b      	orrs	r3, r1
 8003e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e96:	e003      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003eac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eb6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f000 809f 	beq.w	8004000 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ecc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ece:	f7fd fb15 	bl	80014fc <HAL_GetTick>
 8003ed2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed8:	f7fd fb10 	bl	80014fc <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b64      	cmp	r3, #100	@ 0x64
 8003ee6:	d903      	bls.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eee:	e005      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ef0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ed      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d179      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f04:	4b39      	ldr	r3, [pc, #228]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f10:	4053      	eors	r3, r2
 8003f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d015      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f1a:	4b34      	ldr	r3, [pc, #208]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f26:	4b31      	ldr	r3, [pc, #196]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	4a30      	ldr	r2, [pc, #192]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f30:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f32:	4b2e      	ldr	r3, [pc, #184]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f36:	4a2d      	ldr	r2, [pc, #180]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f3c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f44:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f52:	d118      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd fad2 	bl	80014fc <HAL_GetTick>
 8003f58:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f5c:	e00d      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fd facd 	bl	80014fc <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f68:	1ad2      	subs	r2, r2, r3
 8003f6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d903      	bls.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003f78:	e005      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0eb      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d129      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f9e:	d10e      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003fa0:	4b12      	ldr	r3, [pc, #72]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fb0:	091a      	lsrs	r2, r3, #4
 8003fb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6113      	str	r3, [r2, #16]
 8003fbc:	e005      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003fc8:	6113      	str	r3, [r2, #16]
 8003fca:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fcc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fda:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe0:	e00e      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003fea:	e009      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003fec:	58024400 	.word	0x58024400
 8003ff0:	58024800 	.word	0x58024800
 8003ff4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f002 0301 	and.w	r3, r2, #1
 800400c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004010:	2300      	movs	r3, #0
 8004012:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004016:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800401a:	460b      	mov	r3, r1
 800401c:	4313      	orrs	r3, r2
 800401e:	f000 8089 	beq.w	8004134 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004028:	2b28      	cmp	r3, #40	@ 0x28
 800402a:	d86b      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800402c:	a201      	add	r2, pc, #4	@ (adr r2, 8004034 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	0800410d 	.word	0x0800410d
 8004038:	08004105 	.word	0x08004105
 800403c:	08004105 	.word	0x08004105
 8004040:	08004105 	.word	0x08004105
 8004044:	08004105 	.word	0x08004105
 8004048:	08004105 	.word	0x08004105
 800404c:	08004105 	.word	0x08004105
 8004050:	08004105 	.word	0x08004105
 8004054:	080040d9 	.word	0x080040d9
 8004058:	08004105 	.word	0x08004105
 800405c:	08004105 	.word	0x08004105
 8004060:	08004105 	.word	0x08004105
 8004064:	08004105 	.word	0x08004105
 8004068:	08004105 	.word	0x08004105
 800406c:	08004105 	.word	0x08004105
 8004070:	08004105 	.word	0x08004105
 8004074:	080040ef 	.word	0x080040ef
 8004078:	08004105 	.word	0x08004105
 800407c:	08004105 	.word	0x08004105
 8004080:	08004105 	.word	0x08004105
 8004084:	08004105 	.word	0x08004105
 8004088:	08004105 	.word	0x08004105
 800408c:	08004105 	.word	0x08004105
 8004090:	08004105 	.word	0x08004105
 8004094:	0800410d 	.word	0x0800410d
 8004098:	08004105 	.word	0x08004105
 800409c:	08004105 	.word	0x08004105
 80040a0:	08004105 	.word	0x08004105
 80040a4:	08004105 	.word	0x08004105
 80040a8:	08004105 	.word	0x08004105
 80040ac:	08004105 	.word	0x08004105
 80040b0:	08004105 	.word	0x08004105
 80040b4:	0800410d 	.word	0x0800410d
 80040b8:	08004105 	.word	0x08004105
 80040bc:	08004105 	.word	0x08004105
 80040c0:	08004105 	.word	0x08004105
 80040c4:	08004105 	.word	0x08004105
 80040c8:	08004105 	.word	0x08004105
 80040cc:	08004105 	.word	0x08004105
 80040d0:	08004105 	.word	0x08004105
 80040d4:	0800410d 	.word	0x0800410d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	3308      	adds	r3, #8
 80040de:	2101      	movs	r1, #1
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 ffc3 	bl	800506c <RCCEx_PLL2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040ec:	e00f      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	3328      	adds	r3, #40	@ 0x28
 80040f4:	2101      	movs	r1, #1
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 f86a 	bl	80051d0 <RCCEx_PLL3_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800410c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004116:	4bbf      	ldr	r3, [pc, #764]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004124:	4abb      	ldr	r2, [pc, #748]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004126:	430b      	orrs	r3, r1
 8004128:	6553      	str	r3, [r2, #84]	@ 0x54
 800412a:	e003      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f002 0302 	and.w	r3, r2, #2
 8004140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004144:	2300      	movs	r3, #0
 8004146:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800414a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800414e:	460b      	mov	r3, r1
 8004150:	4313      	orrs	r3, r2
 8004152:	d041      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800415a:	2b05      	cmp	r3, #5
 800415c:	d824      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800415e:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	080041b1 	.word	0x080041b1
 8004168:	0800417d 	.word	0x0800417d
 800416c:	08004193 	.word	0x08004193
 8004170:	080041b1 	.word	0x080041b1
 8004174:	080041b1 	.word	0x080041b1
 8004178:	080041b1 	.word	0x080041b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004180:	3308      	adds	r3, #8
 8004182:	2101      	movs	r1, #1
 8004184:	4618      	mov	r0, r3
 8004186:	f000 ff71 	bl	800506c <RCCEx_PLL2_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004190:	e00f      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004196:	3328      	adds	r3, #40	@ 0x28
 8004198:	2101      	movs	r1, #1
 800419a:	4618      	mov	r0, r3
 800419c:	f001 f818 	bl	80051d0 <RCCEx_PLL3_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041a6:	e004      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80041b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041ba:	4b96      	ldr	r3, [pc, #600]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041be:	f023 0107 	bic.w	r1, r3, #7
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041c8:	4a92      	ldr	r2, [pc, #584]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80041ce:	e003      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f002 0304 	and.w	r3, r2, #4
 80041e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	d044      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004200:	2b05      	cmp	r3, #5
 8004202:	d825      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004204:	a201      	add	r2, pc, #4	@ (adr r2, 800420c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	08004259 	.word	0x08004259
 8004210:	08004225 	.word	0x08004225
 8004214:	0800423b 	.word	0x0800423b
 8004218:	08004259 	.word	0x08004259
 800421c:	08004259 	.word	0x08004259
 8004220:	08004259 	.word	0x08004259
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004228:	3308      	adds	r3, #8
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f000 ff1d 	bl	800506c <RCCEx_PLL2_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004238:	e00f      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423e:	3328      	adds	r3, #40	@ 0x28
 8004240:	2101      	movs	r1, #1
 8004242:	4618      	mov	r0, r3
 8004244:	f000 ffc4 	bl	80051d0 <RCCEx_PLL3_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800424e:	e004      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004256:	e000      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004262:	4b6c      	ldr	r3, [pc, #432]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004266:	f023 0107 	bic.w	r1, r3, #7
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004272:	4a68      	ldr	r2, [pc, #416]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004274:	430b      	orrs	r3, r1
 8004276:	6593      	str	r3, [r2, #88]	@ 0x58
 8004278:	e003      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	f002 0320 	and.w	r3, r2, #32
 800428e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004292:	2300      	movs	r3, #0
 8004294:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004298:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800429c:	460b      	mov	r3, r1
 800429e:	4313      	orrs	r3, r2
 80042a0:	d055      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ae:	d033      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80042b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042b4:	d82c      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ba:	d02f      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c0:	d826      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042c6:	d02b      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80042c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042cc:	d820      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042d2:	d012      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80042d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042d8:	d81a      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d022      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80042de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042e2:	d115      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e8:	3308      	adds	r3, #8
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 febd 	bl	800506c <RCCEx_PLL2_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042f8:	e015      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fe:	3328      	adds	r3, #40	@ 0x28
 8004300:	2102      	movs	r1, #2
 8004302:	4618      	mov	r0, r3
 8004304:	f000 ff64 	bl	80051d0 <RCCEx_PLL3_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800430e:	e00a      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004316:	e006      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004318:	bf00      	nop
 800431a:	e004      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800431c:	bf00      	nop
 800431e:	e002      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004320:	bf00      	nop
 8004322:	e000      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800432e:	4b39      	ldr	r3, [pc, #228]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004332:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433e:	4a35      	ldr	r2, [pc, #212]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004340:	430b      	orrs	r3, r1
 8004342:	6553      	str	r3, [r2, #84]	@ 0x54
 8004344:	e003      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800435a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800435e:	2300      	movs	r3, #0
 8004360:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004364:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004368:	460b      	mov	r3, r1
 800436a:	4313      	orrs	r3, r2
 800436c:	d058      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004376:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800437a:	d033      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800437c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004380:	d82c      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004386:	d02f      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438c:	d826      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800438e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004392:	d02b      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004394:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004398:	d820      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800439a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800439e:	d012      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80043a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a4:	d81a      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d022      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ae:	d115      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	3308      	adds	r3, #8
 80043b6:	2100      	movs	r1, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fe57 	bl	800506c <RCCEx_PLL2_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043c4:	e015      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ca:	3328      	adds	r3, #40	@ 0x28
 80043cc:	2102      	movs	r1, #2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fefe 	bl	80051d0 <RCCEx_PLL3_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043da:	e00a      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043e2:	e006      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043e4:	bf00      	nop
 80043e6:	e004      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043e8:	bf00      	nop
 80043ea:	e002      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043ec:	bf00      	nop
 80043ee:	e000      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10e      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043fa:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800440a:	4a02      	ldr	r2, [pc, #8]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800440c:	430b      	orrs	r3, r1
 800440e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004410:	e006      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004412:	bf00      	nop
 8004414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800442c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004430:	2300      	movs	r3, #0
 8004432:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004436:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800443a:	460b      	mov	r3, r1
 800443c:	4313      	orrs	r3, r2
 800443e:	d055      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004444:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004448:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800444c:	d033      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800444e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004452:	d82c      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004458:	d02f      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800445a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800445e:	d826      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004460:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004464:	d02b      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004466:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800446a:	d820      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800446c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004470:	d012      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004472:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004476:	d81a      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004478:	2b00      	cmp	r3, #0
 800447a:	d022      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800447c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004480:	d115      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	3308      	adds	r3, #8
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fdee 	bl	800506c <RCCEx_PLL2_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004496:	e015      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449c:	3328      	adds	r3, #40	@ 0x28
 800449e:	2102      	movs	r1, #2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fe95 	bl	80051d0 <RCCEx_PLL3_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044ac:	e00a      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044b4:	e006      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044b6:	bf00      	nop
 80044b8:	e004      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044ba:	bf00      	nop
 80044bc:	e002      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10b      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80044cc:	4ba1      	ldr	r3, [pc, #644]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044dc:	4a9d      	ldr	r2, [pc, #628]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044de:	430b      	orrs	r3, r1
 80044e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044e2:	e003      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f002 0308 	and.w	r3, r2, #8
 80044f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044fc:	2300      	movs	r3, #0
 80044fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004502:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004506:	460b      	mov	r3, r1
 8004508:	4313      	orrs	r3, r2
 800450a:	d01e      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004518:	d10c      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451e:	3328      	adds	r3, #40	@ 0x28
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fe54 	bl	80051d0 <RCCEx_PLL3_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004534:	4b87      	ldr	r3, [pc, #540]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004538:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004544:	4a83      	ldr	r2, [pc, #524]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004546:	430b      	orrs	r3, r1
 8004548:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f002 0310 	and.w	r3, r2, #16
 8004556:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004560:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004564:	460b      	mov	r3, r1
 8004566:	4313      	orrs	r3, r2
 8004568:	d01e      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004576:	d10c      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	3328      	adds	r3, #40	@ 0x28
 800457e:	2102      	movs	r1, #2
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fe25 	bl	80051d0 <RCCEx_PLL3_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004592:	4b70      	ldr	r3, [pc, #448]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004596:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045a2:	4a6c      	ldr	r2, [pc, #432]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80045b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80045c2:	460b      	mov	r3, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	d03e      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045d4:	d022      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80045d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045da:	d81b      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e4:	d00b      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80045e6:	e015      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ec:	3308      	adds	r3, #8
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fd3b 	bl	800506c <RCCEx_PLL2_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045fc:	e00f      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004602:	3328      	adds	r3, #40	@ 0x28
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fde2 	bl	80051d0 <RCCEx_PLL3_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004612:	e004      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800461a:	e000      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800461c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800461e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004626:	4b4b      	ldr	r3, [pc, #300]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004636:	4a47      	ldr	r2, [pc, #284]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004638:	430b      	orrs	r3, r1
 800463a:	6593      	str	r3, [r2, #88]	@ 0x58
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004652:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004654:	2300      	movs	r3, #0
 8004656:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004658:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800465c:	460b      	mov	r3, r1
 800465e:	4313      	orrs	r3, r2
 8004660:	d03b      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800466e:	d01f      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004670:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004674:	d818      	bhi.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800467a:	d003      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800467c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004680:	d007      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004682:	e011      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004684:	4b33      	ldr	r3, [pc, #204]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	4a32      	ldr	r2, [pc, #200]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800468a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800468e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004690:	e00f      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004696:	3328      	adds	r3, #40	@ 0x28
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fd98 	bl	80051d0 <RCCEx_PLL3_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80046a6:	e004      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046ae:	e000      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80046b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ba:	4b26      	ldr	r3, [pc, #152]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	4a22      	ldr	r2, [pc, #136]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80046d0:	e003      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80046e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80046e8:	2300      	movs	r3, #0
 80046ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80046ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80046f0:	460b      	mov	r3, r1
 80046f2:	4313      	orrs	r3, r2
 80046f4:	d034      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004704:	d007      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004706:	e011      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	4a11      	ldr	r2, [pc, #68]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800470e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004714:	e00e      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471a:	3308      	adds	r3, #8
 800471c:	2102      	movs	r1, #2
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fca4 	bl	800506c <RCCEx_PLL2_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800472a:	e003      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10d      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800473c:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800473e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004740:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474a:	4a02      	ldr	r2, [pc, #8]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800474c:	430b      	orrs	r3, r1
 800474e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004752:	bf00      	nop
 8004754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800475c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800476c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800476e:	2300      	movs	r3, #0
 8004770:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004772:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004776:	460b      	mov	r3, r1
 8004778:	4313      	orrs	r3, r2
 800477a:	d00c      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004780:	3328      	adds	r3, #40	@ 0x28
 8004782:	2102      	movs	r1, #2
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fd23 	bl	80051d0 <RCCEx_PLL3_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80047a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80047a4:	2300      	movs	r3, #0
 80047a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80047a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d038      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047be:	d018      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80047c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047c4:	d811      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047ca:	d014      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80047cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d0:	d80b      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d011      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80047d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047da:	d106      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047dc:	4bc3      	ldr	r3, [pc, #780]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	4ac2      	ldr	r2, [pc, #776]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80047e8:	e008      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f0:	e004      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004804:	4bb9      	ldr	r3, [pc, #740]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004808:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004814:	4ab5      	ldr	r2, [pc, #724]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004816:	430b      	orrs	r3, r1
 8004818:	6553      	str	r3, [r2, #84]	@ 0x54
 800481a:	e003      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004830:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004832:	2300      	movs	r3, #0
 8004834:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004836:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800483a:	460b      	mov	r3, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004840:	4baa      	ldr	r3, [pc, #680]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004844:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800484e:	4aa7      	ldr	r2, [pc, #668]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004850:	430b      	orrs	r3, r1
 8004852:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004860:	653b      	str	r3, [r7, #80]	@ 0x50
 8004862:	2300      	movs	r3, #0
 8004864:	657b      	str	r3, [r7, #84]	@ 0x54
 8004866:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800486a:	460b      	mov	r3, r1
 800486c:	4313      	orrs	r3, r2
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004870:	4b9e      	ldr	r3, [pc, #632]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004880:	4a9a      	ldr	r2, [pc, #616]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004882:	430b      	orrs	r3, r1
 8004884:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004894:	2300      	movs	r3, #0
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004898:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800489c:	460b      	mov	r3, r1
 800489e:	4313      	orrs	r3, r2
 80048a0:	d009      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048a2:	4b92      	ldr	r3, [pc, #584]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b0:	4a8e      	ldr	r2, [pc, #568]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048b2:	430b      	orrs	r3, r1
 80048b4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80048c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80048c4:	2300      	movs	r3, #0
 80048c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80048cc:	460b      	mov	r3, r1
 80048ce:	4313      	orrs	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048d2:	4b86      	ldr	r3, [pc, #536]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	4a85      	ldr	r2, [pc, #532]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80048dc:	6113      	str	r3, [r2, #16]
 80048de:	4b83      	ldr	r3, [pc, #524]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048e0:	6919      	ldr	r1, [r3, #16]
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80048ea:	4a80      	ldr	r2, [pc, #512]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ec:	430b      	orrs	r3, r1
 80048ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80048fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048fe:	2300      	movs	r3, #0
 8004900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004902:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004906:	460b      	mov	r3, r1
 8004908:	4313      	orrs	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800490c:	4b77      	ldr	r3, [pc, #476]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800490e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004910:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491a:	4a74      	ldr	r2, [pc, #464]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800491c:	430b      	orrs	r3, r1
 800491e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800492c:	633b      	str	r3, [r7, #48]	@ 0x30
 800492e:	2300      	movs	r3, #0
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
 8004932:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004936:	460b      	mov	r3, r1
 8004938:	4313      	orrs	r3, r2
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800493c:	4b6b      	ldr	r3, [pc, #428]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800493e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004940:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800494c:	4a67      	ldr	r2, [pc, #412]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800494e:	430b      	orrs	r3, r1
 8004950:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495a:	2100      	movs	r1, #0
 800495c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004964:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004968:	460b      	mov	r3, r1
 800496a:	4313      	orrs	r3, r2
 800496c:	d011      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	3308      	adds	r3, #8
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fb78 	bl	800506c <RCCEx_PLL2_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800498e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	2100      	movs	r1, #0
 800499c:	6239      	str	r1, [r7, #32]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80049a8:	460b      	mov	r3, r1
 80049aa:	4313      	orrs	r3, r2
 80049ac:	d011      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	3308      	adds	r3, #8
 80049b4:	2101      	movs	r1, #1
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fb58 	bl	800506c <RCCEx_PLL2_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	2100      	movs	r1, #0
 80049dc:	61b9      	str	r1, [r7, #24]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80049e8:	460b      	mov	r3, r1
 80049ea:	4313      	orrs	r3, r2
 80049ec:	d011      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f2:	3308      	adds	r3, #8
 80049f4:	2102      	movs	r1, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fb38 	bl	800506c <RCCEx_PLL2_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	6139      	str	r1, [r7, #16]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	d011      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	3328      	adds	r3, #40	@ 0x28
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fbca 	bl	80051d0 <RCCEx_PLL3_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	d011      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a72:	3328      	adds	r3, #40	@ 0x28
 8004a74:	2101      	movs	r1, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fbaa 	bl	80051d0 <RCCEx_PLL3_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	6039      	str	r1, [r7, #0]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	d011      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	3328      	adds	r3, #40	@ 0x28
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fb8a 	bl	80051d0 <RCCEx_PLL3_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004ad2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aec:	58024400 	.word	0x58024400

08004af0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004af4:	f7fe fd96 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4904      	ldr	r1, [pc, #16]	@ (8004b18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	58024400 	.word	0x58024400
 8004b18:	080085d0 	.word	0x080085d0

08004b1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b089      	sub	sp, #36	@ 0x24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b24:	4ba1      	ldr	r3, [pc, #644]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b2e:	4b9f      	ldr	r3, [pc, #636]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b32:	0b1b      	lsrs	r3, r3, #12
 8004b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b3a:	4b9c      	ldr	r3, [pc, #624]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b46:	4b99      	ldr	r3, [pc, #612]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4a:	08db      	lsrs	r3, r3, #3
 8004b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8111 	beq.w	8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	f000 8083 	beq.w	8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	f200 80a1 	bhi.w	8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d056      	beq.n	8004c34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b86:	e099      	b.n	8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b88:	4b88      	ldr	r3, [pc, #544]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d02d      	beq.n	8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b94:	4b85      	ldr	r3, [pc, #532]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	08db      	lsrs	r3, r3, #3
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	4a84      	ldr	r2, [pc, #528]	@ (8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	ee07 3a90 	vmov	s15, r3
 8004bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bbe:	4b7b      	ldr	r3, [pc, #492]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bee:	e087      	b.n	8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c02:	4b6a      	ldr	r3, [pc, #424]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c32:	e065      	b.n	8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c46:	4b59      	ldr	r3, [pc, #356]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c76:	e043      	b.n	8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8a:	4b48      	ldr	r3, [pc, #288]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cba:	e021      	b.n	8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cce:	4b37      	ldr	r3, [pc, #220]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d00:	4b2a      	ldr	r3, [pc, #168]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d04:	0a5b      	lsrs	r3, r3, #9
 8004d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d26:	ee17 2a90 	vmov	r2, s15
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d32:	0c1b      	lsrs	r3, r3, #16
 8004d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d38:	ee07 3a90 	vmov	s15, r3
 8004d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d54:	ee17 2a90 	vmov	r2, s15
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d5c:	4b13      	ldr	r3, [pc, #76]	@ (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d60:	0e1b      	lsrs	r3, r3, #24
 8004d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d82:	ee17 2a90 	vmov	r2, s15
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d8a:	e008      	b.n	8004d9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	609a      	str	r2, [r3, #8]
}
 8004d9e:	bf00      	nop
 8004da0:	3724      	adds	r7, #36	@ 0x24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	58024400 	.word	0x58024400
 8004db0:	03d09000 	.word	0x03d09000
 8004db4:	46000000 	.word	0x46000000
 8004db8:	4c742400 	.word	0x4c742400
 8004dbc:	4a742400 	.word	0x4a742400
 8004dc0:	4af42400 	.word	0x4af42400

08004dc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b089      	sub	sp, #36	@ 0x24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dcc:	4ba1      	ldr	r3, [pc, #644]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004dd6:	4b9f      	ldr	r3, [pc, #636]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	0d1b      	lsrs	r3, r3, #20
 8004ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004de0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004de2:	4b9c      	ldr	r3, [pc, #624]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004dee:	4b99      	ldr	r3, [pc, #612]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8111 	beq.w	8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	f000 8083 	beq.w	8004f20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	f200 80a1 	bhi.w	8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d056      	beq.n	8004edc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e2e:	e099      	b.n	8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e30:	4b88      	ldr	r3, [pc, #544]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02d      	beq.n	8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e3c:	4b85      	ldr	r3, [pc, #532]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	08db      	lsrs	r3, r3, #3
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	4a84      	ldr	r2, [pc, #528]	@ (8005058 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e66:	4b7b      	ldr	r3, [pc, #492]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800505c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e96:	e087      	b.n	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ebe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800505c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eda:	e065      	b.n	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eee:	4b59      	ldr	r3, [pc, #356]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800505c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1e:	e043      	b.n	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f32:	4b48      	ldr	r3, [pc, #288]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800505c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f62:	e021      	b.n	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b37      	ldr	r3, [pc, #220]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800505c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fa6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	0a5b      	lsrs	r3, r3, #9
 8004fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fce:	ee17 2a90 	vmov	r2, s15
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ffc:	ee17 2a90 	vmov	r2, s15
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005004:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800501a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800501e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502a:	ee17 2a90 	vmov	r2, s15
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005032:	e008      	b.n	8005046 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
}
 8005046:	bf00      	nop
 8005048:	3724      	adds	r7, #36	@ 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	58024400 	.word	0x58024400
 8005058:	03d09000 	.word	0x03d09000
 800505c:	46000000 	.word	0x46000000
 8005060:	4c742400 	.word	0x4c742400
 8005064:	4a742400 	.word	0x4a742400
 8005068:	4af42400 	.word	0x4af42400

0800506c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800507a:	4b53      	ldr	r3, [pc, #332]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 800507c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	2b03      	cmp	r3, #3
 8005084:	d101      	bne.n	800508a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e099      	b.n	80051be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800508a:	4b4f      	ldr	r3, [pc, #316]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a4e      	ldr	r2, [pc, #312]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005090:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005096:	f7fc fa31 	bl	80014fc <HAL_GetTick>
 800509a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800509c:	e008      	b.n	80050b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800509e:	f7fc fa2d 	bl	80014fc <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e086      	b.n	80051be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050b0:	4b45      	ldr	r3, [pc, #276]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f0      	bne.n	800509e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050bc:	4b42      	ldr	r3, [pc, #264]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	031b      	lsls	r3, r3, #12
 80050ca:	493f      	ldr	r1, [pc, #252]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	3b01      	subs	r3, #1
 80050e0:	025b      	lsls	r3, r3, #9
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005100:	4931      	ldr	r1, [pc, #196]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005102:	4313      	orrs	r3, r2
 8005104:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005106:	4b30      	ldr	r3, [pc, #192]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	492d      	ldr	r1, [pc, #180]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005114:	4313      	orrs	r3, r2
 8005116:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005118:	4b2b      	ldr	r3, [pc, #172]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	f023 0220 	bic.w	r2, r3, #32
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	4928      	ldr	r1, [pc, #160]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005126:	4313      	orrs	r3, r2
 8005128:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800512a:	4b27      	ldr	r3, [pc, #156]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	4a26      	ldr	r2, [pc, #152]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005130:	f023 0310 	bic.w	r3, r3, #16
 8005134:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005136:	4b24      	ldr	r3, [pc, #144]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800513a:	4b24      	ldr	r3, [pc, #144]	@ (80051cc <RCCEx_PLL2_Config+0x160>)
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	69d2      	ldr	r2, [r2, #28]
 8005142:	00d2      	lsls	r2, r2, #3
 8005144:	4920      	ldr	r1, [pc, #128]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005146:	4313      	orrs	r3, r2
 8005148:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800514a:	4b1f      	ldr	r3, [pc, #124]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	4a1e      	ldr	r2, [pc, #120]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005150:	f043 0310 	orr.w	r3, r3, #16
 8005154:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d106      	bne.n	800516a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800515c:	4b1a      	ldr	r3, [pc, #104]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005160:	4a19      	ldr	r2, [pc, #100]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005162:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005166:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005168:	e00f      	b.n	800518a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d106      	bne.n	800517e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005170:	4b15      	ldr	r3, [pc, #84]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	4a14      	ldr	r2, [pc, #80]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800517a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800517c:	e005      	b.n	800518a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800517e:	4b12      	ldr	r3, [pc, #72]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	4a11      	ldr	r2, [pc, #68]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005184:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005188:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800518a:	4b0f      	ldr	r3, [pc, #60]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a0e      	ldr	r2, [pc, #56]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 8005190:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005196:	f7fc f9b1 	bl	80014fc <HAL_GetTick>
 800519a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800519c:	e008      	b.n	80051b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800519e:	f7fc f9ad 	bl	80014fc <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e006      	b.n	80051be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051b0:	4b05      	ldr	r3, [pc, #20]	@ (80051c8 <RCCEx_PLL2_Config+0x15c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	58024400 	.word	0x58024400
 80051cc:	ffff0007 	.word	0xffff0007

080051d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051de:	4b53      	ldr	r3, [pc, #332]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80051e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d101      	bne.n	80051ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e099      	b.n	8005322 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051ee:	4b4f      	ldr	r3, [pc, #316]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a4e      	ldr	r2, [pc, #312]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80051f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fa:	f7fc f97f 	bl	80014fc <HAL_GetTick>
 80051fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005200:	e008      	b.n	8005214 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005202:	f7fc f97b 	bl	80014fc <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e086      	b.n	8005322 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005214:	4b45      	ldr	r3, [pc, #276]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f0      	bne.n	8005202 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005220:	4b42      	ldr	r3, [pc, #264]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	051b      	lsls	r3, r3, #20
 800522e:	493f      	ldr	r1, [pc, #252]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	628b      	str	r3, [r1, #40]	@ 0x28
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	3b01      	subs	r3, #1
 800523a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	3b01      	subs	r3, #1
 8005244:	025b      	lsls	r3, r3, #9
 8005246:	b29b      	uxth	r3, r3
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	3b01      	subs	r3, #1
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	3b01      	subs	r3, #1
 800525e:	061b      	lsls	r3, r3, #24
 8005260:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005264:	4931      	ldr	r1, [pc, #196]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800526a:	4b30      	ldr	r3, [pc, #192]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	492d      	ldr	r1, [pc, #180]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 8005278:	4313      	orrs	r3, r2
 800527a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800527c:	4b2b      	ldr	r3, [pc, #172]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005280:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	4928      	ldr	r1, [pc, #160]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 800528a:	4313      	orrs	r3, r2
 800528c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800528e:	4b27      	ldr	r3, [pc, #156]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	4a26      	ldr	r2, [pc, #152]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 8005294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005298:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800529a:	4b24      	ldr	r3, [pc, #144]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 800529c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800529e:	4b24      	ldr	r3, [pc, #144]	@ (8005330 <RCCEx_PLL3_Config+0x160>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	69d2      	ldr	r2, [r2, #28]
 80052a6:	00d2      	lsls	r2, r2, #3
 80052a8:	4920      	ldr	r1, [pc, #128]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052ae:	4b1f      	ldr	r3, [pc, #124]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	4a1e      	ldr	r2, [pc, #120]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052c0:	4b1a      	ldr	r3, [pc, #104]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	4a19      	ldr	r2, [pc, #100]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052cc:	e00f      	b.n	80052ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d106      	bne.n	80052e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052d4:	4b15      	ldr	r3, [pc, #84]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d8:	4a14      	ldr	r2, [pc, #80]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052e0:	e005      	b.n	80052ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052e2:	4b12      	ldr	r3, [pc, #72]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e6:	4a11      	ldr	r2, [pc, #68]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052ee:	4b0f      	ldr	r3, [pc, #60]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a0e      	ldr	r2, [pc, #56]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 80052f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fa:	f7fc f8ff 	bl	80014fc <HAL_GetTick>
 80052fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005300:	e008      	b.n	8005314 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005302:	f7fc f8fb 	bl	80014fc <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e006      	b.n	8005322 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005314:	4b05      	ldr	r3, [pc, #20]	@ (800532c <RCCEx_PLL3_Config+0x15c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005320:	7bfb      	ldrb	r3, [r7, #15]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	58024400 	.word	0x58024400
 8005330:	ffff0007 	.word	0xffff0007

08005334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e049      	b.n	80053da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fb fde2 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f000 fb42 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e049      	b.n	8005488 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f841 	bl	8005490 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f000 faeb 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0202 	mvn.w	r2, #2
 80054d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa66 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa58 	bl	80059ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fa69 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0204 	mvn.w	r2, #4
 8005524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fa40 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa32 	bl	80059ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fa43 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d020      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01b      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0208 	mvn.w	r2, #8
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2204      	movs	r2, #4
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa1a 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fa0c 	bl	80059ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fa1d 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d020      	beq.n	80055ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0210 	mvn.w	r2, #16
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2208      	movs	r2, #8
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f9f4 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f9e6 	bl	80059ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f9f7 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0201 	mvn.w	r2, #1
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9c4 	bl	8005998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00c      	beq.n	800563e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fe91 	bl	8006360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00c      	beq.n	8005662 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800565a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fe89 	bl	8006374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00c      	beq.n	8005686 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800567e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f9b1 	bl	80059e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00c      	beq.n	80056aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f06f 0220 	mvn.w	r2, #32
 80056a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fe51 	bl	800634c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e066      	b.n	80057a0 <HAL_TIM_OC_ConfigChannel+0xec>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b14      	cmp	r3, #20
 80056de:	d857      	bhi.n	8005790 <HAL_TIM_OC_ConfigChannel+0xdc>
 80056e0:	a201      	add	r2, pc, #4	@ (adr r2, 80056e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	0800573d 	.word	0x0800573d
 80056ec:	08005791 	.word	0x08005791
 80056f0:	08005791 	.word	0x08005791
 80056f4:	08005791 	.word	0x08005791
 80056f8:	0800574b 	.word	0x0800574b
 80056fc:	08005791 	.word	0x08005791
 8005700:	08005791 	.word	0x08005791
 8005704:	08005791 	.word	0x08005791
 8005708:	08005759 	.word	0x08005759
 800570c:	08005791 	.word	0x08005791
 8005710:	08005791 	.word	0x08005791
 8005714:	08005791 	.word	0x08005791
 8005718:	08005767 	.word	0x08005767
 800571c:	08005791 	.word	0x08005791
 8005720:	08005791 	.word	0x08005791
 8005724:	08005791 	.word	0x08005791
 8005728:	08005775 	.word	0x08005775
 800572c:	08005791 	.word	0x08005791
 8005730:	08005791 	.word	0x08005791
 8005734:	08005791 	.word	0x08005791
 8005738:	08005783 	.word	0x08005783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fa00 	bl	8005b48 <TIM_OC1_SetConfig>
      break;
 8005748:	e025      	b.n	8005796 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fa89 	bl	8005c68 <TIM_OC2_SetConfig>
      break;
 8005756:	e01e      	b.n	8005796 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fb0c 	bl	8005d7c <TIM_OC3_SetConfig>
      break;
 8005764:	e017      	b.n	8005796 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fb8d 	bl	8005e8c <TIM_OC4_SetConfig>
      break;
 8005772:	e010      	b.n	8005796 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fbf0 	bl	8005f60 <TIM_OC5_SetConfig>
      break;
 8005780:	e009      	b.n	8005796 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fc4d 	bl	8006028 <TIM_OC6_SetConfig>
      break;
 800578e:	e002      	b.n	8005796 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
      break;
 8005794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_ConfigClockSource+0x1c>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e0dc      	b.n	800597e <HAL_TIM_ConfigClockSource+0x1d6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	4b6a      	ldr	r3, [pc, #424]	@ (8005988 <HAL_TIM_ConfigClockSource+0x1e0>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a64      	ldr	r2, [pc, #400]	@ (800598c <HAL_TIM_ConfigClockSource+0x1e4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	f000 80a9 	beq.w	8005952 <HAL_TIM_ConfigClockSource+0x1aa>
 8005800:	4a62      	ldr	r2, [pc, #392]	@ (800598c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	f200 80ae 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 8005808:	4a61      	ldr	r2, [pc, #388]	@ (8005990 <HAL_TIM_ConfigClockSource+0x1e8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	f000 80a1 	beq.w	8005952 <HAL_TIM_ConfigClockSource+0x1aa>
 8005810:	4a5f      	ldr	r2, [pc, #380]	@ (8005990 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	f200 80a6 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 8005818:	4a5e      	ldr	r2, [pc, #376]	@ (8005994 <HAL_TIM_ConfigClockSource+0x1ec>)
 800581a:	4293      	cmp	r3, r2
 800581c:	f000 8099 	beq.w	8005952 <HAL_TIM_ConfigClockSource+0x1aa>
 8005820:	4a5c      	ldr	r2, [pc, #368]	@ (8005994 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	f200 809e 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 8005828:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800582c:	f000 8091 	beq.w	8005952 <HAL_TIM_ConfigClockSource+0x1aa>
 8005830:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005834:	f200 8096 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 8005838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800583c:	f000 8089 	beq.w	8005952 <HAL_TIM_ConfigClockSource+0x1aa>
 8005840:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005844:	f200 808e 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 8005848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800584c:	d03e      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0x124>
 800584e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005852:	f200 8087 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 8005856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800585a:	f000 8086 	beq.w	800596a <HAL_TIM_ConfigClockSource+0x1c2>
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005862:	d87f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 8005864:	2b70      	cmp	r3, #112	@ 0x70
 8005866:	d01a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0xf6>
 8005868:	2b70      	cmp	r3, #112	@ 0x70
 800586a:	d87b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 800586c:	2b60      	cmp	r3, #96	@ 0x60
 800586e:	d050      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x16a>
 8005870:	2b60      	cmp	r3, #96	@ 0x60
 8005872:	d877      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 8005874:	2b50      	cmp	r3, #80	@ 0x50
 8005876:	d03c      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x14a>
 8005878:	2b50      	cmp	r3, #80	@ 0x50
 800587a:	d873      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 800587c:	2b40      	cmp	r3, #64	@ 0x40
 800587e:	d058      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x18a>
 8005880:	2b40      	cmp	r3, #64	@ 0x40
 8005882:	d86f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 8005884:	2b30      	cmp	r3, #48	@ 0x30
 8005886:	d064      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x1aa>
 8005888:	2b30      	cmp	r3, #48	@ 0x30
 800588a:	d86b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d060      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x1aa>
 8005890:	2b20      	cmp	r3, #32
 8005892:	d867      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d05c      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x1aa>
 8005898:	2b10      	cmp	r3, #16
 800589a:	d05a      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x1aa>
 800589c:	e062      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ae:	f000 fc9f 	bl	80061f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	609a      	str	r2, [r3, #8]
      break;
 80058ca:	e04f      	b.n	800596c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058dc:	f000 fc88 	bl	80061f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058ee:	609a      	str	r2, [r3, #8]
      break;
 80058f0:	e03c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 fbf8 	bl	80060f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2150      	movs	r1, #80	@ 0x50
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fc52 	bl	80061b4 <TIM_ITRx_SetConfig>
      break;
 8005910:	e02c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800591e:	461a      	mov	r2, r3
 8005920:	f000 fc17 	bl	8006152 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2160      	movs	r1, #96	@ 0x60
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fc42 	bl	80061b4 <TIM_ITRx_SetConfig>
      break;
 8005930:	e01c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800593e:	461a      	mov	r2, r3
 8005940:	f000 fbd8 	bl	80060f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2140      	movs	r1, #64	@ 0x40
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fc32 	bl	80061b4 <TIM_ITRx_SetConfig>
      break;
 8005950:	e00c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f000 fc29 	bl	80061b4 <TIM_ITRx_SetConfig>
      break;
 8005962:	e003      	b.n	800596c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e000      	b.n	800596c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800596a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	ffceff88 	.word	0xffceff88
 800598c:	00100040 	.word	0x00100040
 8005990:	00100030 	.word	0x00100030
 8005994:	00100020 	.word	0x00100020

08005998 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a46      	ldr	r2, [pc, #280]	@ (8005b28 <TIM_Base_SetConfig+0x12c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d013      	beq.n	8005a3c <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1a:	d00f      	beq.n	8005a3c <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a43      	ldr	r2, [pc, #268]	@ (8005b2c <TIM_Base_SetConfig+0x130>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00b      	beq.n	8005a3c <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a42      	ldr	r2, [pc, #264]	@ (8005b30 <TIM_Base_SetConfig+0x134>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d007      	beq.n	8005a3c <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a41      	ldr	r2, [pc, #260]	@ (8005b34 <TIM_Base_SetConfig+0x138>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_Base_SetConfig+0x40>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a40      	ldr	r2, [pc, #256]	@ (8005b38 <TIM_Base_SetConfig+0x13c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d108      	bne.n	8005a4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a35      	ldr	r2, [pc, #212]	@ (8005b28 <TIM_Base_SetConfig+0x12c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d01f      	beq.n	8005a96 <TIM_Base_SetConfig+0x9a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5c:	d01b      	beq.n	8005a96 <TIM_Base_SetConfig+0x9a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a32      	ldr	r2, [pc, #200]	@ (8005b2c <TIM_Base_SetConfig+0x130>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d017      	beq.n	8005a96 <TIM_Base_SetConfig+0x9a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a31      	ldr	r2, [pc, #196]	@ (8005b30 <TIM_Base_SetConfig+0x134>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <TIM_Base_SetConfig+0x9a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a30      	ldr	r2, [pc, #192]	@ (8005b34 <TIM_Base_SetConfig+0x138>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00f      	beq.n	8005a96 <TIM_Base_SetConfig+0x9a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2f      	ldr	r2, [pc, #188]	@ (8005b38 <TIM_Base_SetConfig+0x13c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00b      	beq.n	8005a96 <TIM_Base_SetConfig+0x9a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2e      	ldr	r2, [pc, #184]	@ (8005b3c <TIM_Base_SetConfig+0x140>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d007      	beq.n	8005a96 <TIM_Base_SetConfig+0x9a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2d      	ldr	r2, [pc, #180]	@ (8005b40 <TIM_Base_SetConfig+0x144>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d003      	beq.n	8005a96 <TIM_Base_SetConfig+0x9a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2c      	ldr	r2, [pc, #176]	@ (8005b44 <TIM_Base_SetConfig+0x148>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d108      	bne.n	8005aa8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a16      	ldr	r2, [pc, #88]	@ (8005b28 <TIM_Base_SetConfig+0x12c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00f      	beq.n	8005af4 <TIM_Base_SetConfig+0xf8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a18      	ldr	r2, [pc, #96]	@ (8005b38 <TIM_Base_SetConfig+0x13c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00b      	beq.n	8005af4 <TIM_Base_SetConfig+0xf8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a17      	ldr	r2, [pc, #92]	@ (8005b3c <TIM_Base_SetConfig+0x140>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <TIM_Base_SetConfig+0xf8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a16      	ldr	r2, [pc, #88]	@ (8005b40 <TIM_Base_SetConfig+0x144>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_Base_SetConfig+0xf8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a15      	ldr	r2, [pc, #84]	@ (8005b44 <TIM_Base_SetConfig+0x148>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d103      	bne.n	8005afc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d105      	bne.n	8005b1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f023 0201 	bic.w	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	611a      	str	r2, [r3, #16]
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40010400 	.word	0x40010400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40014400 	.word	0x40014400
 8005b44:	40014800 	.word	0x40014800

08005b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	f023 0201 	bic.w	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4b37      	ldr	r3, [pc, #220]	@ (8005c50 <TIM_OC1_SetConfig+0x108>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 0302 	bic.w	r3, r3, #2
 8005b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c54 <TIM_OC1_SetConfig+0x10c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00f      	beq.n	8005bc4 <TIM_OC1_SetConfig+0x7c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8005c58 <TIM_OC1_SetConfig+0x110>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <TIM_OC1_SetConfig+0x7c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a2b      	ldr	r2, [pc, #172]	@ (8005c5c <TIM_OC1_SetConfig+0x114>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d007      	beq.n	8005bc4 <TIM_OC1_SetConfig+0x7c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8005c60 <TIM_OC1_SetConfig+0x118>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_OC1_SetConfig+0x7c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a29      	ldr	r2, [pc, #164]	@ (8005c64 <TIM_OC1_SetConfig+0x11c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10c      	bne.n	8005bde <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0308 	bic.w	r3, r3, #8
 8005bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f023 0304 	bic.w	r3, r3, #4
 8005bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c54 <TIM_OC1_SetConfig+0x10c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00f      	beq.n	8005c06 <TIM_OC1_SetConfig+0xbe>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <TIM_OC1_SetConfig+0x110>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00b      	beq.n	8005c06 <TIM_OC1_SetConfig+0xbe>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8005c5c <TIM_OC1_SetConfig+0x114>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d007      	beq.n	8005c06 <TIM_OC1_SetConfig+0xbe>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a19      	ldr	r2, [pc, #100]	@ (8005c60 <TIM_OC1_SetConfig+0x118>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC1_SetConfig+0xbe>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a18      	ldr	r2, [pc, #96]	@ (8005c64 <TIM_OC1_SetConfig+0x11c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d111      	bne.n	8005c2a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	621a      	str	r2, [r3, #32]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	fffeff8f 	.word	0xfffeff8f
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40010400 	.word	0x40010400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	40014400 	.word	0x40014400
 8005c64:	40014800 	.word	0x40014800

08005c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	f023 0210 	bic.w	r2, r3, #16
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4b34      	ldr	r3, [pc, #208]	@ (8005d64 <TIM_OC2_SetConfig+0xfc>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 0320 	bic.w	r3, r3, #32
 8005cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a29      	ldr	r2, [pc, #164]	@ (8005d68 <TIM_OC2_SetConfig+0x100>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_OC2_SetConfig+0x68>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a28      	ldr	r2, [pc, #160]	@ (8005d6c <TIM_OC2_SetConfig+0x104>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d10d      	bne.n	8005cec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a1e      	ldr	r2, [pc, #120]	@ (8005d68 <TIM_OC2_SetConfig+0x100>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00f      	beq.n	8005d14 <TIM_OC2_SetConfig+0xac>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d6c <TIM_OC2_SetConfig+0x104>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00b      	beq.n	8005d14 <TIM_OC2_SetConfig+0xac>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8005d70 <TIM_OC2_SetConfig+0x108>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d007      	beq.n	8005d14 <TIM_OC2_SetConfig+0xac>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a1b      	ldr	r2, [pc, #108]	@ (8005d74 <TIM_OC2_SetConfig+0x10c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_OC2_SetConfig+0xac>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d78 <TIM_OC2_SetConfig+0x110>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d113      	bne.n	8005d3c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	feff8fff 	.word	0xfeff8fff
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	40010400 	.word	0x40010400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400
 8005d78:	40014800 	.word	0x40014800

08005d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4b33      	ldr	r3, [pc, #204]	@ (8005e74 <TIM_OC3_SetConfig+0xf8>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a28      	ldr	r2, [pc, #160]	@ (8005e78 <TIM_OC3_SetConfig+0xfc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC3_SetConfig+0x66>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a27      	ldr	r2, [pc, #156]	@ (8005e7c <TIM_OC3_SetConfig+0x100>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d10d      	bne.n	8005dfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <TIM_OC3_SetConfig+0xfc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00f      	beq.n	8005e26 <TIM_OC3_SetConfig+0xaa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1c      	ldr	r2, [pc, #112]	@ (8005e7c <TIM_OC3_SetConfig+0x100>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00b      	beq.n	8005e26 <TIM_OC3_SetConfig+0xaa>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a1b      	ldr	r2, [pc, #108]	@ (8005e80 <TIM_OC3_SetConfig+0x104>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <TIM_OC3_SetConfig+0xaa>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1a      	ldr	r2, [pc, #104]	@ (8005e84 <TIM_OC3_SetConfig+0x108>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_OC3_SetConfig+0xaa>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a19      	ldr	r2, [pc, #100]	@ (8005e88 <TIM_OC3_SetConfig+0x10c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d113      	bne.n	8005e4e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	621a      	str	r2, [r3, #32]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	fffeff8f 	.word	0xfffeff8f
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40010400 	.word	0x40010400
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40014400 	.word	0x40014400
 8005e88:	40014800 	.word	0x40014800

08005e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4b24      	ldr	r3, [pc, #144]	@ (8005f48 <TIM_OC4_SetConfig+0xbc>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	031b      	lsls	r3, r3, #12
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a19      	ldr	r2, [pc, #100]	@ (8005f4c <TIM_OC4_SetConfig+0xc0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00f      	beq.n	8005f0c <TIM_OC4_SetConfig+0x80>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a18      	ldr	r2, [pc, #96]	@ (8005f50 <TIM_OC4_SetConfig+0xc4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <TIM_OC4_SetConfig+0x80>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a17      	ldr	r2, [pc, #92]	@ (8005f54 <TIM_OC4_SetConfig+0xc8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_OC4_SetConfig+0x80>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a16      	ldr	r2, [pc, #88]	@ (8005f58 <TIM_OC4_SetConfig+0xcc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC4_SetConfig+0x80>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a15      	ldr	r2, [pc, #84]	@ (8005f5c <TIM_OC4_SetConfig+0xd0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d109      	bne.n	8005f20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	feff8fff 	.word	0xfeff8fff
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40010400 	.word	0x40010400
 8005f54:	40014000 	.word	0x40014000
 8005f58:	40014400 	.word	0x40014400
 8005f5c:	40014800 	.word	0x40014800

08005f60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4b21      	ldr	r3, [pc, #132]	@ (8006010 <TIM_OC5_SetConfig+0xb0>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a18      	ldr	r2, [pc, #96]	@ (8006014 <TIM_OC5_SetConfig+0xb4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00f      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x76>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a17      	ldr	r2, [pc, #92]	@ (8006018 <TIM_OC5_SetConfig+0xb8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00b      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x76>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a16      	ldr	r2, [pc, #88]	@ (800601c <TIM_OC5_SetConfig+0xbc>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d007      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x76>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a15      	ldr	r2, [pc, #84]	@ (8006020 <TIM_OC5_SetConfig+0xc0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x76>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a14      	ldr	r2, [pc, #80]	@ (8006024 <TIM_OC5_SetConfig+0xc4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d109      	bne.n	8005fea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	fffeff8f 	.word	0xfffeff8f
 8006014:	40010000 	.word	0x40010000
 8006018:	40010400 	.word	0x40010400
 800601c:	40014000 	.word	0x40014000
 8006020:	40014400 	.word	0x40014400
 8006024:	40014800 	.word	0x40014800

08006028 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4b22      	ldr	r3, [pc, #136]	@ (80060dc <TIM_OC6_SetConfig+0xb4>)
 8006054:	4013      	ands	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800606a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	051b      	lsls	r3, r3, #20
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a19      	ldr	r2, [pc, #100]	@ (80060e0 <TIM_OC6_SetConfig+0xb8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00f      	beq.n	80060a0 <TIM_OC6_SetConfig+0x78>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a18      	ldr	r2, [pc, #96]	@ (80060e4 <TIM_OC6_SetConfig+0xbc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00b      	beq.n	80060a0 <TIM_OC6_SetConfig+0x78>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a17      	ldr	r2, [pc, #92]	@ (80060e8 <TIM_OC6_SetConfig+0xc0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d007      	beq.n	80060a0 <TIM_OC6_SetConfig+0x78>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a16      	ldr	r2, [pc, #88]	@ (80060ec <TIM_OC6_SetConfig+0xc4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_OC6_SetConfig+0x78>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a15      	ldr	r2, [pc, #84]	@ (80060f0 <TIM_OC6_SetConfig+0xc8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d109      	bne.n	80060b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	029b      	lsls	r3, r3, #10
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	feff8fff 	.word	0xfeff8fff
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40010400 	.word	0x40010400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40014400 	.word	0x40014400
 80060f0:	40014800 	.word	0x40014800

080060f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f023 0201 	bic.w	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800611e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 030a 	bic.w	r3, r3, #10
 8006130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006152:	b480      	push	{r7}
 8006154:	b087      	sub	sp, #28
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f023 0210 	bic.w	r2, r3, #16
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800617c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	031b      	lsls	r3, r3, #12
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800618e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	621a      	str	r2, [r3, #32]
}
 80061a6:	bf00      	nop
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4b09      	ldr	r3, [pc, #36]	@ (80061ec <TIM_ITRx_SetConfig+0x38>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f043 0307 	orr.w	r3, r3, #7
 80061d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	609a      	str	r2, [r3, #8]
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	ffcfff8f 	.word	0xffcfff8f

080061f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800620a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	431a      	orrs	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006244:	2302      	movs	r3, #2
 8006246:	e06d      	b.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a30      	ldr	r2, [pc, #192]	@ (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2f      	ldr	r2, [pc, #188]	@ (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d108      	bne.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006282:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006294:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a20      	ldr	r2, [pc, #128]	@ (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d022      	beq.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ba:	d01d      	beq.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d018      	beq.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1c      	ldr	r2, [pc, #112]	@ (800633c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00e      	beq.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a15      	ldr	r2, [pc, #84]	@ (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a16      	ldr	r2, [pc, #88]	@ (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a15      	ldr	r2, [pc, #84]	@ (8006348 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d10c      	bne.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4313      	orrs	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40010000 	.word	0x40010000
 8006334:	40010400 	.word	0x40010400
 8006338:	40000400 	.word	0x40000400
 800633c:	40000800 	.word	0x40000800
 8006340:	40000c00 	.word	0x40000c00
 8006344:	40001800 	.word	0x40001800
 8006348:	40014000 	.word	0x40014000

0800634c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e042      	b.n	8006420 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7fa fe17 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2224      	movs	r2, #36	@ 0x24
 80063b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fe1e 	bl	8007014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f8b3 	bl	8006544 <UART_SetConfig>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e01b      	b.n	8006420 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fe9d 	bl	8007158 <UART_CheckIdleState>
 800641e:	4603      	mov	r3, r0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	@ 0x28
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643e:	2b20      	cmp	r3, #32
 8006440:	d17b      	bne.n	800653a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_UART_Transmit+0x26>
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e074      	b.n	800653c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2221      	movs	r2, #33	@ 0x21
 800645e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006462:	f7fb f84b 	bl	80014fc <HAL_GetTick>
 8006466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	88fa      	ldrh	r2, [r7, #6]
 800646c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	88fa      	ldrh	r2, [r7, #6]
 8006474:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006480:	d108      	bne.n	8006494 <HAL_UART_Transmit+0x6c>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d104      	bne.n	8006494 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e003      	b.n	800649c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800649c:	e030      	b.n	8006500 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2200      	movs	r2, #0
 80064a6:	2180      	movs	r1, #128	@ 0x80
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 feff 	bl	80072ac <UART_WaitOnFlagUntilTimeout>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e03d      	b.n	800653c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10b      	bne.n	80064de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	3302      	adds	r3, #2
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	e007      	b.n	80064ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	781a      	ldrb	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	3301      	adds	r3, #1
 80064ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1c8      	bne.n	800649e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2200      	movs	r2, #0
 8006514:	2140      	movs	r1, #64	@ 0x40
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 fec8 	bl	80072ac <UART_WaitOnFlagUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e006      	b.n	800653c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	e000      	b.n	800653c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800653a:	2302      	movs	r3, #2
  }
}
 800653c:	4618      	mov	r0, r3
 800653e:	3720      	adds	r7, #32
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006548:	b092      	sub	sp, #72	@ 0x48
 800654a:	af00      	add	r7, sp, #0
 800654c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	431a      	orrs	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	431a      	orrs	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	4313      	orrs	r3, r2
 800656a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4bbe      	ldr	r3, [pc, #760]	@ (800686c <UART_SetConfig+0x328>)
 8006574:	4013      	ands	r3, r2
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800657c:	430b      	orrs	r3, r1
 800657e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4ab3      	ldr	r2, [pc, #716]	@ (8006870 <UART_SetConfig+0x32c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ac:	4313      	orrs	r3, r2
 80065ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	4baf      	ldr	r3, [pc, #700]	@ (8006874 <UART_SetConfig+0x330>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ca:	f023 010f 	bic.w	r1, r3, #15
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4aa6      	ldr	r2, [pc, #664]	@ (8006878 <UART_SetConfig+0x334>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d177      	bne.n	80066d4 <UART_SetConfig+0x190>
 80065e4:	4ba5      	ldr	r3, [pc, #660]	@ (800687c <UART_SetConfig+0x338>)
 80065e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065ec:	2b28      	cmp	r3, #40	@ 0x28
 80065ee:	d86d      	bhi.n	80066cc <UART_SetConfig+0x188>
 80065f0:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0xb4>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	0800669d 	.word	0x0800669d
 80065fc:	080066cd 	.word	0x080066cd
 8006600:	080066cd 	.word	0x080066cd
 8006604:	080066cd 	.word	0x080066cd
 8006608:	080066cd 	.word	0x080066cd
 800660c:	080066cd 	.word	0x080066cd
 8006610:	080066cd 	.word	0x080066cd
 8006614:	080066cd 	.word	0x080066cd
 8006618:	080066a5 	.word	0x080066a5
 800661c:	080066cd 	.word	0x080066cd
 8006620:	080066cd 	.word	0x080066cd
 8006624:	080066cd 	.word	0x080066cd
 8006628:	080066cd 	.word	0x080066cd
 800662c:	080066cd 	.word	0x080066cd
 8006630:	080066cd 	.word	0x080066cd
 8006634:	080066cd 	.word	0x080066cd
 8006638:	080066ad 	.word	0x080066ad
 800663c:	080066cd 	.word	0x080066cd
 8006640:	080066cd 	.word	0x080066cd
 8006644:	080066cd 	.word	0x080066cd
 8006648:	080066cd 	.word	0x080066cd
 800664c:	080066cd 	.word	0x080066cd
 8006650:	080066cd 	.word	0x080066cd
 8006654:	080066cd 	.word	0x080066cd
 8006658:	080066b5 	.word	0x080066b5
 800665c:	080066cd 	.word	0x080066cd
 8006660:	080066cd 	.word	0x080066cd
 8006664:	080066cd 	.word	0x080066cd
 8006668:	080066cd 	.word	0x080066cd
 800666c:	080066cd 	.word	0x080066cd
 8006670:	080066cd 	.word	0x080066cd
 8006674:	080066cd 	.word	0x080066cd
 8006678:	080066bd 	.word	0x080066bd
 800667c:	080066cd 	.word	0x080066cd
 8006680:	080066cd 	.word	0x080066cd
 8006684:	080066cd 	.word	0x080066cd
 8006688:	080066cd 	.word	0x080066cd
 800668c:	080066cd 	.word	0x080066cd
 8006690:	080066cd 	.word	0x080066cd
 8006694:	080066cd 	.word	0x080066cd
 8006698:	080066c5 	.word	0x080066c5
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a2:	e222      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066a4:	2304      	movs	r3, #4
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066aa:	e21e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066ac:	2308      	movs	r3, #8
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b2:	e21a      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066b4:	2310      	movs	r3, #16
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ba:	e216      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066bc:	2320      	movs	r3, #32
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c2:	e212      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066c4:	2340      	movs	r3, #64	@ 0x40
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e20e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066cc:	2380      	movs	r3, #128	@ 0x80
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e20a      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a69      	ldr	r2, [pc, #420]	@ (8006880 <UART_SetConfig+0x33c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d130      	bne.n	8006740 <UART_SetConfig+0x1fc>
 80066de:	4b67      	ldr	r3, [pc, #412]	@ (800687c <UART_SetConfig+0x338>)
 80066e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	d826      	bhi.n	8006738 <UART_SetConfig+0x1f4>
 80066ea:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <UART_SetConfig+0x1ac>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006709 	.word	0x08006709
 80066f4:	08006711 	.word	0x08006711
 80066f8:	08006719 	.word	0x08006719
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006729 	.word	0x08006729
 8006704:	08006731 	.word	0x08006731
 8006708:	2300      	movs	r3, #0
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670e:	e1ec      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006716:	e1e8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671e:	e1e4      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006726:	e1e0      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006728:	2320      	movs	r3, #32
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e1dc      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006730:	2340      	movs	r3, #64	@ 0x40
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e1d8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006738:	2380      	movs	r3, #128	@ 0x80
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e1d4      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a4f      	ldr	r2, [pc, #316]	@ (8006884 <UART_SetConfig+0x340>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d130      	bne.n	80067ac <UART_SetConfig+0x268>
 800674a:	4b4c      	ldr	r3, [pc, #304]	@ (800687c <UART_SetConfig+0x338>)
 800674c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b05      	cmp	r3, #5
 8006754:	d826      	bhi.n	80067a4 <UART_SetConfig+0x260>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x218>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006775 	.word	0x08006775
 8006760:	0800677d 	.word	0x0800677d
 8006764:	08006785 	.word	0x08006785
 8006768:	0800678d 	.word	0x0800678d
 800676c:	08006795 	.word	0x08006795
 8006770:	0800679d 	.word	0x0800679d
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e1b6      	b.n	8006aea <UART_SetConfig+0x5a6>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e1b2      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e1ae      	b.n	8006aea <UART_SetConfig+0x5a6>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006792:	e1aa      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006794:	2320      	movs	r3, #32
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e1a6      	b.n	8006aea <UART_SetConfig+0x5a6>
 800679c:	2340      	movs	r3, #64	@ 0x40
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e1a2      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067a4:	2380      	movs	r3, #128	@ 0x80
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e19e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a35      	ldr	r2, [pc, #212]	@ (8006888 <UART_SetConfig+0x344>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d130      	bne.n	8006818 <UART_SetConfig+0x2d4>
 80067b6:	4b31      	ldr	r3, [pc, #196]	@ (800687c <UART_SetConfig+0x338>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d826      	bhi.n	8006810 <UART_SetConfig+0x2cc>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <UART_SetConfig+0x284>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006801 	.word	0x08006801
 80067dc:	08006809 	.word	0x08006809
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e6:	e180      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ee:	e17c      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f6:	e178      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fe:	e174      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006800:	2320      	movs	r3, #32
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e170      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006808:	2340      	movs	r3, #64	@ 0x40
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e16c      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006810:	2380      	movs	r3, #128	@ 0x80
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e168      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1b      	ldr	r2, [pc, #108]	@ (800688c <UART_SetConfig+0x348>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d142      	bne.n	80068a8 <UART_SetConfig+0x364>
 8006822:	4b16      	ldr	r3, [pc, #88]	@ (800687c <UART_SetConfig+0x338>)
 8006824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b05      	cmp	r3, #5
 800682c:	d838      	bhi.n	80068a0 <UART_SetConfig+0x35c>
 800682e:	a201      	add	r2, pc, #4	@ (adr r2, 8006834 <UART_SetConfig+0x2f0>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	0800684d 	.word	0x0800684d
 8006838:	08006855 	.word	0x08006855
 800683c:	0800685d 	.word	0x0800685d
 8006840:	08006865 	.word	0x08006865
 8006844:	08006891 	.word	0x08006891
 8006848:	08006899 	.word	0x08006899
 800684c:	2300      	movs	r3, #0
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e14a      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685a:	e146      	b.n	8006aea <UART_SetConfig+0x5a6>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006862:	e142      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e13e      	b.n	8006aea <UART_SetConfig+0x5a6>
 800686c:	cfff69f3 	.word	0xcfff69f3
 8006870:	58000c00 	.word	0x58000c00
 8006874:	11fff4ff 	.word	0x11fff4ff
 8006878:	40011000 	.word	0x40011000
 800687c:	58024400 	.word	0x58024400
 8006880:	40004400 	.word	0x40004400
 8006884:	40004800 	.word	0x40004800
 8006888:	40004c00 	.word	0x40004c00
 800688c:	40005000 	.word	0x40005000
 8006890:	2320      	movs	r3, #32
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006896:	e128      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006898:	2340      	movs	r3, #64	@ 0x40
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800689e:	e124      	b.n	8006aea <UART_SetConfig+0x5a6>
 80068a0:	2380      	movs	r3, #128	@ 0x80
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a6:	e120      	b.n	8006aea <UART_SetConfig+0x5a6>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4acb      	ldr	r2, [pc, #812]	@ (8006bdc <UART_SetConfig+0x698>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d176      	bne.n	80069a0 <UART_SetConfig+0x45c>
 80068b2:	4bcb      	ldr	r3, [pc, #812]	@ (8006be0 <UART_SetConfig+0x69c>)
 80068b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068ba:	2b28      	cmp	r3, #40	@ 0x28
 80068bc:	d86c      	bhi.n	8006998 <UART_SetConfig+0x454>
 80068be:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <UART_SetConfig+0x380>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	08006969 	.word	0x08006969
 80068c8:	08006999 	.word	0x08006999
 80068cc:	08006999 	.word	0x08006999
 80068d0:	08006999 	.word	0x08006999
 80068d4:	08006999 	.word	0x08006999
 80068d8:	08006999 	.word	0x08006999
 80068dc:	08006999 	.word	0x08006999
 80068e0:	08006999 	.word	0x08006999
 80068e4:	08006971 	.word	0x08006971
 80068e8:	08006999 	.word	0x08006999
 80068ec:	08006999 	.word	0x08006999
 80068f0:	08006999 	.word	0x08006999
 80068f4:	08006999 	.word	0x08006999
 80068f8:	08006999 	.word	0x08006999
 80068fc:	08006999 	.word	0x08006999
 8006900:	08006999 	.word	0x08006999
 8006904:	08006979 	.word	0x08006979
 8006908:	08006999 	.word	0x08006999
 800690c:	08006999 	.word	0x08006999
 8006910:	08006999 	.word	0x08006999
 8006914:	08006999 	.word	0x08006999
 8006918:	08006999 	.word	0x08006999
 800691c:	08006999 	.word	0x08006999
 8006920:	08006999 	.word	0x08006999
 8006924:	08006981 	.word	0x08006981
 8006928:	08006999 	.word	0x08006999
 800692c:	08006999 	.word	0x08006999
 8006930:	08006999 	.word	0x08006999
 8006934:	08006999 	.word	0x08006999
 8006938:	08006999 	.word	0x08006999
 800693c:	08006999 	.word	0x08006999
 8006940:	08006999 	.word	0x08006999
 8006944:	08006989 	.word	0x08006989
 8006948:	08006999 	.word	0x08006999
 800694c:	08006999 	.word	0x08006999
 8006950:	08006999 	.word	0x08006999
 8006954:	08006999 	.word	0x08006999
 8006958:	08006999 	.word	0x08006999
 800695c:	08006999 	.word	0x08006999
 8006960:	08006999 	.word	0x08006999
 8006964:	08006991 	.word	0x08006991
 8006968:	2301      	movs	r3, #1
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e0bc      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006976:	e0b8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e0b4      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e0b0      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006988:	2320      	movs	r3, #32
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e0ac      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006990:	2340      	movs	r3, #64	@ 0x40
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e0a8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006998:	2380      	movs	r3, #128	@ 0x80
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e0a4      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a8f      	ldr	r2, [pc, #572]	@ (8006be4 <UART_SetConfig+0x6a0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d130      	bne.n	8006a0c <UART_SetConfig+0x4c8>
 80069aa:	4b8d      	ldr	r3, [pc, #564]	@ (8006be0 <UART_SetConfig+0x69c>)
 80069ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	2b05      	cmp	r3, #5
 80069b4:	d826      	bhi.n	8006a04 <UART_SetConfig+0x4c0>
 80069b6:	a201      	add	r2, pc, #4	@ (adr r2, 80069bc <UART_SetConfig+0x478>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069d5 	.word	0x080069d5
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	080069e5 	.word	0x080069e5
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069da:	e086      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069dc:	2304      	movs	r3, #4
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e2:	e082      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069e4:	2308      	movs	r3, #8
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ea:	e07e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069ec:	2310      	movs	r3, #16
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f2:	e07a      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069f4:	2320      	movs	r3, #32
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fa:	e076      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069fc:	2340      	movs	r3, #64	@ 0x40
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e072      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a04:	2380      	movs	r3, #128	@ 0x80
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e06e      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a75      	ldr	r2, [pc, #468]	@ (8006be8 <UART_SetConfig+0x6a4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d130      	bne.n	8006a78 <UART_SetConfig+0x534>
 8006a16:	4b72      	ldr	r3, [pc, #456]	@ (8006be0 <UART_SetConfig+0x69c>)
 8006a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	d826      	bhi.n	8006a70 <UART_SetConfig+0x52c>
 8006a22:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <UART_SetConfig+0x4e4>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a41 	.word	0x08006a41
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a51 	.word	0x08006a51
 8006a34:	08006a59 	.word	0x08006a59
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a69 	.word	0x08006a69
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a46:	e050      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e04c      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e048      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e044      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a60:	2320      	movs	r3, #32
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e040      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a68:	2340      	movs	r3, #64	@ 0x40
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e03c      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a70:	2380      	movs	r3, #128	@ 0x80
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e038      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a5b      	ldr	r2, [pc, #364]	@ (8006bec <UART_SetConfig+0x6a8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d130      	bne.n	8006ae4 <UART_SetConfig+0x5a0>
 8006a82:	4b57      	ldr	r3, [pc, #348]	@ (8006be0 <UART_SetConfig+0x69c>)
 8006a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b05      	cmp	r3, #5
 8006a8c:	d826      	bhi.n	8006adc <UART_SetConfig+0x598>
 8006a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a94 <UART_SetConfig+0x550>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006aad 	.word	0x08006aad
 8006a98:	08006ab5 	.word	0x08006ab5
 8006a9c:	08006abd 	.word	0x08006abd
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006acd 	.word	0x08006acd
 8006aa8:	08006ad5 	.word	0x08006ad5
 8006aac:	2302      	movs	r3, #2
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab2:	e01a      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aba:	e016      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006abc:	2308      	movs	r3, #8
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac2:	e012      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aca:	e00e      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006acc:	2320      	movs	r3, #32
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad2:	e00a      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ad4:	2340      	movs	r3, #64	@ 0x40
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ada:	e006      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006adc:	2380      	movs	r3, #128	@ 0x80
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae2:	e002      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ae4:	2380      	movs	r3, #128	@ 0x80
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a3f      	ldr	r2, [pc, #252]	@ (8006bec <UART_SetConfig+0x6a8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	f040 80f8 	bne.w	8006ce6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006af6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	dc46      	bgt.n	8006b8c <UART_SetConfig+0x648>
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	f2c0 8082 	blt.w	8006c08 <UART_SetConfig+0x6c4>
 8006b04:	3b02      	subs	r3, #2
 8006b06:	2b1e      	cmp	r3, #30
 8006b08:	d87e      	bhi.n	8006c08 <UART_SetConfig+0x6c4>
 8006b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b10 <UART_SetConfig+0x5cc>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006b93 	.word	0x08006b93
 8006b14:	08006c09 	.word	0x08006c09
 8006b18:	08006b9b 	.word	0x08006b9b
 8006b1c:	08006c09 	.word	0x08006c09
 8006b20:	08006c09 	.word	0x08006c09
 8006b24:	08006c09 	.word	0x08006c09
 8006b28:	08006bab 	.word	0x08006bab
 8006b2c:	08006c09 	.word	0x08006c09
 8006b30:	08006c09 	.word	0x08006c09
 8006b34:	08006c09 	.word	0x08006c09
 8006b38:	08006c09 	.word	0x08006c09
 8006b3c:	08006c09 	.word	0x08006c09
 8006b40:	08006c09 	.word	0x08006c09
 8006b44:	08006c09 	.word	0x08006c09
 8006b48:	08006bbb 	.word	0x08006bbb
 8006b4c:	08006c09 	.word	0x08006c09
 8006b50:	08006c09 	.word	0x08006c09
 8006b54:	08006c09 	.word	0x08006c09
 8006b58:	08006c09 	.word	0x08006c09
 8006b5c:	08006c09 	.word	0x08006c09
 8006b60:	08006c09 	.word	0x08006c09
 8006b64:	08006c09 	.word	0x08006c09
 8006b68:	08006c09 	.word	0x08006c09
 8006b6c:	08006c09 	.word	0x08006c09
 8006b70:	08006c09 	.word	0x08006c09
 8006b74:	08006c09 	.word	0x08006c09
 8006b78:	08006c09 	.word	0x08006c09
 8006b7c:	08006c09 	.word	0x08006c09
 8006b80:	08006c09 	.word	0x08006c09
 8006b84:	08006c09 	.word	0x08006c09
 8006b88:	08006bfb 	.word	0x08006bfb
 8006b8c:	2b40      	cmp	r3, #64	@ 0x40
 8006b8e:	d037      	beq.n	8006c00 <UART_SetConfig+0x6bc>
 8006b90:	e03a      	b.n	8006c08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b92:	f7fd ffad 	bl	8004af0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b98:	e03c      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd ffbc 	bl	8004b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba8:	e034      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006baa:	f107 0318 	add.w	r3, r7, #24
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe f908 	bl	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bb8:	e02c      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bba:	4b09      	ldr	r3, [pc, #36]	@ (8006be0 <UART_SetConfig+0x69c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bc6:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <UART_SetConfig+0x69c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	4a07      	ldr	r2, [pc, #28]	@ (8006bf0 <UART_SetConfig+0x6ac>)
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bd8:	e01c      	b.n	8006c14 <UART_SetConfig+0x6d0>
 8006bda:	bf00      	nop
 8006bdc:	40011400 	.word	0x40011400
 8006be0:	58024400 	.word	0x58024400
 8006be4:	40007800 	.word	0x40007800
 8006be8:	40007c00 	.word	0x40007c00
 8006bec:	58000c00 	.word	0x58000c00
 8006bf0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006bf4:	4b9d      	ldr	r3, [pc, #628]	@ (8006e6c <UART_SetConfig+0x928>)
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf8:	e00c      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bfa:	4b9d      	ldr	r3, [pc, #628]	@ (8006e70 <UART_SetConfig+0x92c>)
 8006bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bfe:	e009      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c06:	e005      	b.n	8006c14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 81de 	beq.w	8006fd8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c20:	4a94      	ldr	r2, [pc, #592]	@ (8006e74 <UART_SetConfig+0x930>)
 8006c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c2e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	4413      	add	r3, r2
 8006c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d305      	bcc.n	8006c4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d903      	bls.n	8006c54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c52:	e1c1      	b.n	8006fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c56:	2200      	movs	r2, #0
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	60fa      	str	r2, [r7, #12]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	4a84      	ldr	r2, [pc, #528]	@ (8006e74 <UART_SetConfig+0x930>)
 8006c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2200      	movs	r2, #0
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c76:	f7f9 fb83 	bl	8000380 <__aeabi_uldivmod>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4619      	mov	r1, r3
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	020b      	lsls	r3, r1, #8
 8006c8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c90:	0202      	lsls	r2, r0, #8
 8006c92:	6979      	ldr	r1, [r7, #20]
 8006c94:	6849      	ldr	r1, [r1, #4]
 8006c96:	0849      	lsrs	r1, r1, #1
 8006c98:	2000      	movs	r0, #0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	eb12 0804 	adds.w	r8, r2, r4
 8006ca2:	eb43 0905 	adc.w	r9, r3, r5
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	469a      	mov	sl, r3
 8006cae:	4693      	mov	fp, r2
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	f7f9 fb62 	bl	8000380 <__aeabi_uldivmod>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cca:	d308      	bcc.n	8006cde <UART_SetConfig+0x79a>
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cd2:	d204      	bcs.n	8006cde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cda:	60da      	str	r2, [r3, #12]
 8006cdc:	e17c      	b.n	8006fd8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006ce4:	e178      	b.n	8006fd8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cee:	f040 80c5 	bne.w	8006e7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006cf2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	dc48      	bgt.n	8006d8c <UART_SetConfig+0x848>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	db7b      	blt.n	8006df6 <UART_SetConfig+0x8b2>
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d879      	bhi.n	8006df6 <UART_SetConfig+0x8b2>
 8006d02:	a201      	add	r2, pc, #4	@ (adr r2, 8006d08 <UART_SetConfig+0x7c4>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d93 	.word	0x08006d93
 8006d0c:	08006d9b 	.word	0x08006d9b
 8006d10:	08006df7 	.word	0x08006df7
 8006d14:	08006df7 	.word	0x08006df7
 8006d18:	08006da3 	.word	0x08006da3
 8006d1c:	08006df7 	.word	0x08006df7
 8006d20:	08006df7 	.word	0x08006df7
 8006d24:	08006df7 	.word	0x08006df7
 8006d28:	08006db3 	.word	0x08006db3
 8006d2c:	08006df7 	.word	0x08006df7
 8006d30:	08006df7 	.word	0x08006df7
 8006d34:	08006df7 	.word	0x08006df7
 8006d38:	08006df7 	.word	0x08006df7
 8006d3c:	08006df7 	.word	0x08006df7
 8006d40:	08006df7 	.word	0x08006df7
 8006d44:	08006df7 	.word	0x08006df7
 8006d48:	08006dc3 	.word	0x08006dc3
 8006d4c:	08006df7 	.word	0x08006df7
 8006d50:	08006df7 	.word	0x08006df7
 8006d54:	08006df7 	.word	0x08006df7
 8006d58:	08006df7 	.word	0x08006df7
 8006d5c:	08006df7 	.word	0x08006df7
 8006d60:	08006df7 	.word	0x08006df7
 8006d64:	08006df7 	.word	0x08006df7
 8006d68:	08006df7 	.word	0x08006df7
 8006d6c:	08006df7 	.word	0x08006df7
 8006d70:	08006df7 	.word	0x08006df7
 8006d74:	08006df7 	.word	0x08006df7
 8006d78:	08006df7 	.word	0x08006df7
 8006d7c:	08006df7 	.word	0x08006df7
 8006d80:	08006df7 	.word	0x08006df7
 8006d84:	08006df7 	.word	0x08006df7
 8006d88:	08006de9 	.word	0x08006de9
 8006d8c:	2b40      	cmp	r3, #64	@ 0x40
 8006d8e:	d02e      	beq.n	8006dee <UART_SetConfig+0x8aa>
 8006d90:	e031      	b.n	8006df6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d92:	f7fc fc77 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8006d96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d98:	e033      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d9a:	f7fc fc89 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 8006d9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006da0:	e02f      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fd feb8 	bl	8004b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006db0:	e027      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db2:	f107 0318 	add.w	r3, r7, #24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe f804 	bl	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc0:	e01f      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8006e78 <UART_SetConfig+0x934>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dce:	4b2a      	ldr	r3, [pc, #168]	@ (8006e78 <UART_SetConfig+0x934>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	08db      	lsrs	r3, r3, #3
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	4a24      	ldr	r2, [pc, #144]	@ (8006e6c <UART_SetConfig+0x928>)
 8006dda:	fa22 f303 	lsr.w	r3, r2, r3
 8006dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006de0:	e00f      	b.n	8006e02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006de2:	4b22      	ldr	r3, [pc, #136]	@ (8006e6c <UART_SetConfig+0x928>)
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de6:	e00c      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006de8:	4b21      	ldr	r3, [pc, #132]	@ (8006e70 <UART_SetConfig+0x92c>)
 8006dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dec:	e009      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006df4:	e005      	b.n	8006e02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 80e7 	beq.w	8006fd8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	4a19      	ldr	r2, [pc, #100]	@ (8006e74 <UART_SetConfig+0x930>)
 8006e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1c:	005a      	lsls	r2, r3, #1
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	441a      	add	r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e32:	2b0f      	cmp	r3, #15
 8006e34:	d916      	bls.n	8006e64 <UART_SetConfig+0x920>
 8006e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e3c:	d212      	bcs.n	8006e64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f023 030f 	bic.w	r3, r3, #15
 8006e46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e56:	4313      	orrs	r3, r2
 8006e58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	e0b9      	b.n	8006fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e6a:	e0b5      	b.n	8006fd8 <UART_SetConfig+0xa94>
 8006e6c:	03d09000 	.word	0x03d09000
 8006e70:	003d0900 	.word	0x003d0900
 8006e74:	080085e0 	.word	0x080085e0
 8006e78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	dc49      	bgt.n	8006f18 <UART_SetConfig+0x9d4>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	db7c      	blt.n	8006f82 <UART_SetConfig+0xa3e>
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d87a      	bhi.n	8006f82 <UART_SetConfig+0xa3e>
 8006e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e94 <UART_SetConfig+0x950>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006f1f 	.word	0x08006f1f
 8006e98:	08006f27 	.word	0x08006f27
 8006e9c:	08006f83 	.word	0x08006f83
 8006ea0:	08006f83 	.word	0x08006f83
 8006ea4:	08006f2f 	.word	0x08006f2f
 8006ea8:	08006f83 	.word	0x08006f83
 8006eac:	08006f83 	.word	0x08006f83
 8006eb0:	08006f83 	.word	0x08006f83
 8006eb4:	08006f3f 	.word	0x08006f3f
 8006eb8:	08006f83 	.word	0x08006f83
 8006ebc:	08006f83 	.word	0x08006f83
 8006ec0:	08006f83 	.word	0x08006f83
 8006ec4:	08006f83 	.word	0x08006f83
 8006ec8:	08006f83 	.word	0x08006f83
 8006ecc:	08006f83 	.word	0x08006f83
 8006ed0:	08006f83 	.word	0x08006f83
 8006ed4:	08006f4f 	.word	0x08006f4f
 8006ed8:	08006f83 	.word	0x08006f83
 8006edc:	08006f83 	.word	0x08006f83
 8006ee0:	08006f83 	.word	0x08006f83
 8006ee4:	08006f83 	.word	0x08006f83
 8006ee8:	08006f83 	.word	0x08006f83
 8006eec:	08006f83 	.word	0x08006f83
 8006ef0:	08006f83 	.word	0x08006f83
 8006ef4:	08006f83 	.word	0x08006f83
 8006ef8:	08006f83 	.word	0x08006f83
 8006efc:	08006f83 	.word	0x08006f83
 8006f00:	08006f83 	.word	0x08006f83
 8006f04:	08006f83 	.word	0x08006f83
 8006f08:	08006f83 	.word	0x08006f83
 8006f0c:	08006f83 	.word	0x08006f83
 8006f10:	08006f83 	.word	0x08006f83
 8006f14:	08006f75 	.word	0x08006f75
 8006f18:	2b40      	cmp	r3, #64	@ 0x40
 8006f1a:	d02e      	beq.n	8006f7a <UART_SetConfig+0xa36>
 8006f1c:	e031      	b.n	8006f82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1e:	f7fc fbb1 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8006f22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f24:	e033      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f26:	f7fc fbc3 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 8006f2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f2c:	e02f      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fd fdf2 	bl	8004b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3c:	e027      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f3e:	f107 0318 	add.w	r3, r7, #24
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fd ff3e 	bl	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4c:	e01f      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8007004 <UART_SetConfig+0xac0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8007004 <UART_SetConfig+0xac0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	08db      	lsrs	r3, r3, #3
 8006f60:	f003 0303 	and.w	r3, r3, #3
 8006f64:	4a28      	ldr	r2, [pc, #160]	@ (8007008 <UART_SetConfig+0xac4>)
 8006f66:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f6c:	e00f      	b.n	8006f8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006f6e:	4b26      	ldr	r3, [pc, #152]	@ (8007008 <UART_SetConfig+0xac4>)
 8006f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f72:	e00c      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f74:	4b25      	ldr	r3, [pc, #148]	@ (800700c <UART_SetConfig+0xac8>)
 8006f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f78:	e009      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f80:	e005      	b.n	8006f8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d021      	beq.n	8006fd8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	4a1d      	ldr	r2, [pc, #116]	@ (8007010 <UART_SetConfig+0xacc>)
 8006f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	441a      	add	r2, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fba:	2b0f      	cmp	r3, #15
 8006fbc:	d909      	bls.n	8006fd2 <UART_SetConfig+0xa8e>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc4:	d205      	bcs.n	8006fd2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60da      	str	r2, [r3, #12]
 8006fd0:	e002      	b.n	8006fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2200      	movs	r2, #0
 8006fec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ff4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3748      	adds	r7, #72	@ 0x48
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007002:	bf00      	nop
 8007004:	58024400 	.word	0x58024400
 8007008:	03d09000 	.word	0x03d09000
 800700c:	003d0900 	.word	0x003d0900
 8007010:	080085e0 	.word	0x080085e0

08007014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a8:	f003 0310 	and.w	r3, r3, #16
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01a      	beq.n	800712a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007112:	d10a      	bne.n	800712a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	605a      	str	r2, [r3, #4]
  }
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b098      	sub	sp, #96	@ 0x60
 800715c:	af02      	add	r7, sp, #8
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007168:	f7fa f9c8 	bl	80014fc <HAL_GetTick>
 800716c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b08      	cmp	r3, #8
 800717a:	d12f      	bne.n	80071dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800717c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007184:	2200      	movs	r2, #0
 8007186:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f88e 	bl	80072ac <UART_WaitOnFlagUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d022      	beq.n	80071dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80071b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e6      	bne.n	8007196 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e063      	b.n	80072a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0304 	and.w	r3, r3, #4
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d149      	bne.n	800727e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f2:	2200      	movs	r2, #0
 80071f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f857 	bl	80072ac <UART_WaitOnFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d03c      	beq.n	800727e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	623b      	str	r3, [r7, #32]
   return(result);
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007222:	633b      	str	r3, [r7, #48]	@ 0x30
 8007224:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e6      	bne.n	8007204 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3308      	adds	r3, #8
 800723c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	60fb      	str	r3, [r7, #12]
   return(result);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f023 0301 	bic.w	r3, r3, #1
 800724c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3308      	adds	r3, #8
 8007254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007256:	61fa      	str	r2, [r7, #28]
 8007258:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	69b9      	ldr	r1, [r7, #24]
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	617b      	str	r3, [r7, #20]
   return(result);
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e5      	bne.n	8007236 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e012      	b.n	80072a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3758      	adds	r7, #88	@ 0x58
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	4613      	mov	r3, r2
 80072ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072bc:	e04f      	b.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d04b      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c6:	f7fa f919 	bl	80014fc <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <UART_WaitOnFlagUntilTimeout+0x30>
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e04e      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d037      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2b80      	cmp	r3, #128	@ 0x80
 80072f2:	d034      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b40      	cmp	r3, #64	@ 0x40
 80072f8:	d031      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b08      	cmp	r3, #8
 8007306:	d110      	bne.n	800732a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2208      	movs	r2, #8
 800730e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f839 	bl	8007388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2208      	movs	r2, #8
 800731a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e029      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007334:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007338:	d111      	bne.n	800735e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f81f 	bl	8007388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2220      	movs	r2, #32
 800734e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e00f      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4013      	ands	r3, r2
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	429a      	cmp	r2, r3
 800736c:	bf0c      	ite	eq
 800736e:	2301      	moveq	r3, #1
 8007370:	2300      	movne	r3, #0
 8007372:	b2db      	uxtb	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	429a      	cmp	r2, r3
 800737a:	d0a0      	beq.n	80072be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007388:	b480      	push	{r7}
 800738a:	b095      	sub	sp, #84	@ 0x54
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80073b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e6      	bne.n	8007390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	4b1e      	ldr	r3, [pc, #120]	@ (8007450 <UART_EndRxTransfer+0xc8>)
 80073d6:	4013      	ands	r3, r2
 80073d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e5      	bne.n	80073c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d118      	bne.n	8007430 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	60bb      	str	r3, [r7, #8]
   return(result);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f023 0310 	bic.w	r3, r3, #16
 8007412:	647b      	str	r3, [r7, #68]	@ 0x44
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6979      	ldr	r1, [r7, #20]
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	e841 2300 	strex	r3, r2, [r1]
 8007428:	613b      	str	r3, [r7, #16]
   return(result);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e6      	bne.n	80073fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007444:	bf00      	nop
 8007446:	3754      	adds	r7, #84	@ 0x54
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	effffffe 	.word	0xeffffffe

08007454 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_UARTEx_DisableFifoMode+0x16>
 8007466:	2302      	movs	r3, #2
 8007468:	e027      	b.n	80074ba <HAL_UARTEx_DisableFifoMode+0x66>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2224      	movs	r2, #36	@ 0x24
 8007476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007498:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d101      	bne.n	80074de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074da:	2302      	movs	r3, #2
 80074dc:	e02d      	b.n	800753a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2224      	movs	r2, #36	@ 0x24
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0201 	bic.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f850 	bl	80075c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007556:	2302      	movs	r3, #2
 8007558:	e02d      	b.n	80075b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2224      	movs	r2, #36	@ 0x24
 8007566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0201 	bic.w	r2, r2, #1
 8007580:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f812 	bl	80075c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d108      	bne.n	80075e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075e0:	e031      	b.n	8007646 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075e2:	2310      	movs	r3, #16
 80075e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075e6:	2310      	movs	r3, #16
 80075e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	0e5b      	lsrs	r3, r3, #25
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	0f5b      	lsrs	r3, r3, #29
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	7b3a      	ldrb	r2, [r7, #12]
 800760e:	4911      	ldr	r1, [pc, #68]	@ (8007654 <UARTEx_SetNbDataToProcess+0x94>)
 8007610:	5c8a      	ldrb	r2, [r1, r2]
 8007612:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007616:	7b3a      	ldrb	r2, [r7, #12]
 8007618:	490f      	ldr	r1, [pc, #60]	@ (8007658 <UARTEx_SetNbDataToProcess+0x98>)
 800761a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800761c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	7b7a      	ldrb	r2, [r7, #13]
 800762c:	4909      	ldr	r1, [pc, #36]	@ (8007654 <UARTEx_SetNbDataToProcess+0x94>)
 800762e:	5c8a      	ldrb	r2, [r1, r2]
 8007630:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007634:	7b7a      	ldrb	r2, [r7, #13]
 8007636:	4908      	ldr	r1, [pc, #32]	@ (8007658 <UARTEx_SetNbDataToProcess+0x98>)
 8007638:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800763a:	fb93 f3f2 	sdiv	r3, r3, r2
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	080085f8 	.word	0x080085f8
 8007658:	08008600 	.word	0x08008600

0800765c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800765c:	b084      	sub	sp, #16
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	f107 001c 	add.w	r0, r7, #28
 800766a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800766e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007672:	2b01      	cmp	r3, #1
 8007674:	d121      	bne.n	80076ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	4b2c      	ldr	r3, [pc, #176]	@ (8007738 <USB_CoreInit+0xdc>)
 8007688:	4013      	ands	r3, r2
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800769a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d105      	bne.n	80076ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 faaa 	bl	8007c08 <USB_CoreReset>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]
 80076b8:	e01b      	b.n	80076f2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa9e 	bl	8007c08 <USB_CoreReset>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d106      	bne.n	80076e6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80076e4:	e005      	b.n	80076f2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076f2:	7fbb      	ldrb	r3, [r7, #30]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d116      	bne.n	8007726 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007706:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <USB_CoreInit+0xe0>)
 8007708:	4313      	orrs	r3, r2
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f043 0206 	orr.w	r2, r3, #6
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f043 0220 	orr.w	r2, r3, #32
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007726:	7bfb      	ldrb	r3, [r7, #15]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007732:	b004      	add	sp, #16
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	ffbdffbf 	.word	0xffbdffbf
 800773c:	03ee0000 	.word	0x03ee0000

08007740 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f023 0201 	bic.w	r2, r3, #1
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d115      	bne.n	80077b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007790:	200a      	movs	r0, #10
 8007792:	f7f9 febf 	bl	8001514 <HAL_Delay>
      ms += 10U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	330a      	adds	r3, #10
 800779a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fa25 	bl	8007bec <USB_GetMode>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d01e      	beq.n	80077e6 <USB_SetCurrentMode+0x84>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80077ac:	d9f0      	bls.n	8007790 <USB_SetCurrentMode+0x2e>
 80077ae:	e01a      	b.n	80077e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d115      	bne.n	80077e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077c2:	200a      	movs	r0, #10
 80077c4:	f7f9 fea6 	bl	8001514 <HAL_Delay>
      ms += 10U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	330a      	adds	r3, #10
 80077cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa0c 	bl	8007bec <USB_GetMode>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <USB_SetCurrentMode+0x84>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80077de:	d9f0      	bls.n	80077c2 <USB_SetCurrentMode+0x60>
 80077e0:	e001      	b.n	80077e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e005      	b.n	80077f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80077ea:	d101      	bne.n	80077f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077fc:	b084      	sub	sp, #16
 80077fe:	b580      	push	{r7, lr}
 8007800:	b086      	sub	sp, #24
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800780a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007816:	2300      	movs	r3, #0
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	e009      	b.n	8007830 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	3340      	adds	r3, #64	@ 0x40
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	2200      	movs	r2, #0
 8007828:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	3301      	adds	r3, #1
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	2b0e      	cmp	r3, #14
 8007834:	d9f2      	bls.n	800781c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007836:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800783a:	2b00      	cmp	r3, #0
 800783c:	d11c      	bne.n	8007878 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800784c:	f043 0302 	orr.w	r3, r3, #2
 8007850:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007856:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	e005      	b.n	8007884 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800788a:	461a      	mov	r2, r3
 800788c:	2300      	movs	r3, #0
 800788e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007890:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007894:	2b01      	cmp	r3, #1
 8007896:	d10d      	bne.n	80078b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078a0:	2100      	movs	r1, #0
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f968 	bl	8007b78 <USB_SetDevSpeed>
 80078a8:	e008      	b.n	80078bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078aa:	2101      	movs	r1, #1
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f963 	bl	8007b78 <USB_SetDevSpeed>
 80078b2:	e003      	b.n	80078bc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078b4:	2103      	movs	r1, #3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f95e 	bl	8007b78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078bc:	2110      	movs	r1, #16
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f8fa 	bl	8007ab8 <USB_FlushTxFifo>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f924 	bl	8007b1c <USB_FlushRxFifo>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e4:	461a      	mov	r2, r3
 80078e6:	2300      	movs	r3, #0
 80078e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f0:	461a      	mov	r2, r3
 80078f2:	2300      	movs	r3, #0
 80078f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078fc:	461a      	mov	r2, r3
 80078fe:	2300      	movs	r3, #0
 8007900:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007902:	2300      	movs	r3, #0
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	e043      	b.n	8007990 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800791a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800791e:	d118      	bne.n	8007952 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007932:	461a      	mov	r2, r3
 8007934:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	e013      	b.n	8007964 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007948:	461a      	mov	r2, r3
 800794a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	e008      	b.n	8007964 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795e:	461a      	mov	r2, r3
 8007960:	2300      	movs	r3, #0
 8007962:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007970:	461a      	mov	r2, r3
 8007972:	2300      	movs	r3, #0
 8007974:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007982:	461a      	mov	r2, r3
 8007984:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007988:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	3301      	adds	r3, #1
 800798e:	613b      	str	r3, [r7, #16]
 8007990:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007994:	461a      	mov	r2, r3
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	4293      	cmp	r3, r2
 800799a:	d3b5      	bcc.n	8007908 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800799c:	2300      	movs	r3, #0
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	e043      	b.n	8007a2a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079b8:	d118      	bne.n	80079ec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079cc:	461a      	mov	r2, r3
 80079ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e013      	b.n	80079fe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e2:	461a      	mov	r2, r3
 80079e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	e008      	b.n	80079fe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f8:	461a      	mov	r2, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	3301      	adds	r3, #1
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a2e:	461a      	mov	r2, r3
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d3b5      	bcc.n	80079a2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d105      	bne.n	8007a6c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	f043 0210 	orr.w	r2, r3, #16
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab0 <USB_DevInit+0x2b4>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f043 0208 	orr.w	r2, r3, #8
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d105      	bne.n	8007aa0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	4b06      	ldr	r3, [pc, #24]	@ (8007ab4 <USB_DevInit+0x2b8>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aac:	b004      	add	sp, #16
 8007aae:	4770      	bx	lr
 8007ab0:	803c3800 	.word	0x803c3800
 8007ab4:	40000004 	.word	0x40000004

08007ab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ad2:	d901      	bls.n	8007ad8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e01b      	b.n	8007b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	daf2      	bge.n	8007ac6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	019b      	lsls	r3, r3, #6
 8007ae8:	f043 0220 	orr.w	r2, r3, #32
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3301      	adds	r3, #1
 8007af4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007afc:	d901      	bls.n	8007b02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e006      	b.n	8007b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d0f0      	beq.n	8007af0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b34:	d901      	bls.n	8007b3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e018      	b.n	8007b6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	daf2      	bge.n	8007b28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2210      	movs	r2, #16
 8007b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b58:	d901      	bls.n	8007b5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e006      	b.n	8007b6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	d0f0      	beq.n	8007b4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	68f9      	ldr	r1, [r7, #12]
 8007b94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bc4:	f023 0303 	bic.w	r3, r3, #3
 8007bc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bd8:	f043 0302 	orr.w	r3, r3, #2
 8007bdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3301      	adds	r3, #1
 8007c18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c20:	d901      	bls.n	8007c26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e01b      	b.n	8007c5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	daf2      	bge.n	8007c14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f043 0201 	orr.w	r2, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c4a:	d901      	bls.n	8007c50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e006      	b.n	8007c5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d0f0      	beq.n	8007c3e <USB_CoreReset+0x36>

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
	...

08007c6c <siprintf>:
 8007c6c:	b40e      	push	{r1, r2, r3}
 8007c6e:	b500      	push	{lr}
 8007c70:	b09c      	sub	sp, #112	@ 0x70
 8007c72:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c74:	9002      	str	r0, [sp, #8]
 8007c76:	9006      	str	r0, [sp, #24]
 8007c78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c7c:	4809      	ldr	r0, [pc, #36]	@ (8007ca4 <siprintf+0x38>)
 8007c7e:	9107      	str	r1, [sp, #28]
 8007c80:	9104      	str	r1, [sp, #16]
 8007c82:	4909      	ldr	r1, [pc, #36]	@ (8007ca8 <siprintf+0x3c>)
 8007c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c88:	9105      	str	r1, [sp, #20]
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	a902      	add	r1, sp, #8
 8007c90:	f000 f994 	bl	8007fbc <_svfiprintf_r>
 8007c94:	9b02      	ldr	r3, [sp, #8]
 8007c96:	2200      	movs	r2, #0
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	b01c      	add	sp, #112	@ 0x70
 8007c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ca0:	b003      	add	sp, #12
 8007ca2:	4770      	bx	lr
 8007ca4:	24000028 	.word	0x24000028
 8007ca8:	ffff0208 	.word	0xffff0208

08007cac <memset>:
 8007cac:	4402      	add	r2, r0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d100      	bne.n	8007cb6 <memset+0xa>
 8007cb4:	4770      	bx	lr
 8007cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cba:	e7f9      	b.n	8007cb0 <memset+0x4>

08007cbc <__errno>:
 8007cbc:	4b01      	ldr	r3, [pc, #4]	@ (8007cc4 <__errno+0x8>)
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	24000028 	.word	0x24000028

08007cc8 <__libc_init_array>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4d0d      	ldr	r5, [pc, #52]	@ (8007d00 <__libc_init_array+0x38>)
 8007ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8007d04 <__libc_init_array+0x3c>)
 8007cce:	1b64      	subs	r4, r4, r5
 8007cd0:	10a4      	asrs	r4, r4, #2
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	42a6      	cmp	r6, r4
 8007cd6:	d109      	bne.n	8007cec <__libc_init_array+0x24>
 8007cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8007d08 <__libc_init_array+0x40>)
 8007cda:	4c0c      	ldr	r4, [pc, #48]	@ (8007d0c <__libc_init_array+0x44>)
 8007cdc:	f000 fc66 	bl	80085ac <_init>
 8007ce0:	1b64      	subs	r4, r4, r5
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	42a6      	cmp	r6, r4
 8007ce8:	d105      	bne.n	8007cf6 <__libc_init_array+0x2e>
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf0:	4798      	blx	r3
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	e7ee      	b.n	8007cd4 <__libc_init_array+0xc>
 8007cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfa:	4798      	blx	r3
 8007cfc:	3601      	adds	r6, #1
 8007cfe:	e7f2      	b.n	8007ce6 <__libc_init_array+0x1e>
 8007d00:	08008644 	.word	0x08008644
 8007d04:	08008644 	.word	0x08008644
 8007d08:	08008644 	.word	0x08008644
 8007d0c:	08008648 	.word	0x08008648

08007d10 <__retarget_lock_acquire_recursive>:
 8007d10:	4770      	bx	lr

08007d12 <__retarget_lock_release_recursive>:
 8007d12:	4770      	bx	lr

08007d14 <_free_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4605      	mov	r5, r0
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	d041      	beq.n	8007da0 <_free_r+0x8c>
 8007d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d20:	1f0c      	subs	r4, r1, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	bfb8      	it	lt
 8007d26:	18e4      	addlt	r4, r4, r3
 8007d28:	f000 f8e0 	bl	8007eec <__malloc_lock>
 8007d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007da4 <_free_r+0x90>)
 8007d2e:	6813      	ldr	r3, [r2, #0]
 8007d30:	b933      	cbnz	r3, 8007d40 <_free_r+0x2c>
 8007d32:	6063      	str	r3, [r4, #4]
 8007d34:	6014      	str	r4, [r2, #0]
 8007d36:	4628      	mov	r0, r5
 8007d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d3c:	f000 b8dc 	b.w	8007ef8 <__malloc_unlock>
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	d908      	bls.n	8007d56 <_free_r+0x42>
 8007d44:	6820      	ldr	r0, [r4, #0]
 8007d46:	1821      	adds	r1, r4, r0
 8007d48:	428b      	cmp	r3, r1
 8007d4a:	bf01      	itttt	eq
 8007d4c:	6819      	ldreq	r1, [r3, #0]
 8007d4e:	685b      	ldreq	r3, [r3, #4]
 8007d50:	1809      	addeq	r1, r1, r0
 8007d52:	6021      	streq	r1, [r4, #0]
 8007d54:	e7ed      	b.n	8007d32 <_free_r+0x1e>
 8007d56:	461a      	mov	r2, r3
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	b10b      	cbz	r3, 8007d60 <_free_r+0x4c>
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	d9fa      	bls.n	8007d56 <_free_r+0x42>
 8007d60:	6811      	ldr	r1, [r2, #0]
 8007d62:	1850      	adds	r0, r2, r1
 8007d64:	42a0      	cmp	r0, r4
 8007d66:	d10b      	bne.n	8007d80 <_free_r+0x6c>
 8007d68:	6820      	ldr	r0, [r4, #0]
 8007d6a:	4401      	add	r1, r0
 8007d6c:	1850      	adds	r0, r2, r1
 8007d6e:	4283      	cmp	r3, r0
 8007d70:	6011      	str	r1, [r2, #0]
 8007d72:	d1e0      	bne.n	8007d36 <_free_r+0x22>
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	6053      	str	r3, [r2, #4]
 8007d7a:	4408      	add	r0, r1
 8007d7c:	6010      	str	r0, [r2, #0]
 8007d7e:	e7da      	b.n	8007d36 <_free_r+0x22>
 8007d80:	d902      	bls.n	8007d88 <_free_r+0x74>
 8007d82:	230c      	movs	r3, #12
 8007d84:	602b      	str	r3, [r5, #0]
 8007d86:	e7d6      	b.n	8007d36 <_free_r+0x22>
 8007d88:	6820      	ldr	r0, [r4, #0]
 8007d8a:	1821      	adds	r1, r4, r0
 8007d8c:	428b      	cmp	r3, r1
 8007d8e:	bf04      	itt	eq
 8007d90:	6819      	ldreq	r1, [r3, #0]
 8007d92:	685b      	ldreq	r3, [r3, #4]
 8007d94:	6063      	str	r3, [r4, #4]
 8007d96:	bf04      	itt	eq
 8007d98:	1809      	addeq	r1, r1, r0
 8007d9a:	6021      	streq	r1, [r4, #0]
 8007d9c:	6054      	str	r4, [r2, #4]
 8007d9e:	e7ca      	b.n	8007d36 <_free_r+0x22>
 8007da0:	bd38      	pop	{r3, r4, r5, pc}
 8007da2:	bf00      	nop
 8007da4:	24000998 	.word	0x24000998

08007da8 <sbrk_aligned>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	4e0f      	ldr	r6, [pc, #60]	@ (8007de8 <sbrk_aligned+0x40>)
 8007dac:	460c      	mov	r4, r1
 8007dae:	6831      	ldr	r1, [r6, #0]
 8007db0:	4605      	mov	r5, r0
 8007db2:	b911      	cbnz	r1, 8007dba <sbrk_aligned+0x12>
 8007db4:	f000 fba6 	bl	8008504 <_sbrk_r>
 8007db8:	6030      	str	r0, [r6, #0]
 8007dba:	4621      	mov	r1, r4
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f000 fba1 	bl	8008504 <_sbrk_r>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d103      	bne.n	8007dce <sbrk_aligned+0x26>
 8007dc6:	f04f 34ff 	mov.w	r4, #4294967295
 8007dca:	4620      	mov	r0, r4
 8007dcc:	bd70      	pop	{r4, r5, r6, pc}
 8007dce:	1cc4      	adds	r4, r0, #3
 8007dd0:	f024 0403 	bic.w	r4, r4, #3
 8007dd4:	42a0      	cmp	r0, r4
 8007dd6:	d0f8      	beq.n	8007dca <sbrk_aligned+0x22>
 8007dd8:	1a21      	subs	r1, r4, r0
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 fb92 	bl	8008504 <_sbrk_r>
 8007de0:	3001      	adds	r0, #1
 8007de2:	d1f2      	bne.n	8007dca <sbrk_aligned+0x22>
 8007de4:	e7ef      	b.n	8007dc6 <sbrk_aligned+0x1e>
 8007de6:	bf00      	nop
 8007de8:	24000994 	.word	0x24000994

08007dec <_malloc_r>:
 8007dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df0:	1ccd      	adds	r5, r1, #3
 8007df2:	f025 0503 	bic.w	r5, r5, #3
 8007df6:	3508      	adds	r5, #8
 8007df8:	2d0c      	cmp	r5, #12
 8007dfa:	bf38      	it	cc
 8007dfc:	250c      	movcc	r5, #12
 8007dfe:	2d00      	cmp	r5, #0
 8007e00:	4606      	mov	r6, r0
 8007e02:	db01      	blt.n	8007e08 <_malloc_r+0x1c>
 8007e04:	42a9      	cmp	r1, r5
 8007e06:	d904      	bls.n	8007e12 <_malloc_r+0x26>
 8007e08:	230c      	movs	r3, #12
 8007e0a:	6033      	str	r3, [r6, #0]
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ee8 <_malloc_r+0xfc>
 8007e16:	f000 f869 	bl	8007eec <__malloc_lock>
 8007e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e1e:	461c      	mov	r4, r3
 8007e20:	bb44      	cbnz	r4, 8007e74 <_malloc_r+0x88>
 8007e22:	4629      	mov	r1, r5
 8007e24:	4630      	mov	r0, r6
 8007e26:	f7ff ffbf 	bl	8007da8 <sbrk_aligned>
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	d158      	bne.n	8007ee2 <_malloc_r+0xf6>
 8007e30:	f8d8 4000 	ldr.w	r4, [r8]
 8007e34:	4627      	mov	r7, r4
 8007e36:	2f00      	cmp	r7, #0
 8007e38:	d143      	bne.n	8007ec2 <_malloc_r+0xd6>
 8007e3a:	2c00      	cmp	r4, #0
 8007e3c:	d04b      	beq.n	8007ed6 <_malloc_r+0xea>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	4639      	mov	r1, r7
 8007e42:	4630      	mov	r0, r6
 8007e44:	eb04 0903 	add.w	r9, r4, r3
 8007e48:	f000 fb5c 	bl	8008504 <_sbrk_r>
 8007e4c:	4581      	cmp	r9, r0
 8007e4e:	d142      	bne.n	8007ed6 <_malloc_r+0xea>
 8007e50:	6821      	ldr	r1, [r4, #0]
 8007e52:	1a6d      	subs	r5, r5, r1
 8007e54:	4629      	mov	r1, r5
 8007e56:	4630      	mov	r0, r6
 8007e58:	f7ff ffa6 	bl	8007da8 <sbrk_aligned>
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d03a      	beq.n	8007ed6 <_malloc_r+0xea>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	442b      	add	r3, r5
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	bb62      	cbnz	r2, 8007ec8 <_malloc_r+0xdc>
 8007e6e:	f8c8 7000 	str.w	r7, [r8]
 8007e72:	e00f      	b.n	8007e94 <_malloc_r+0xa8>
 8007e74:	6822      	ldr	r2, [r4, #0]
 8007e76:	1b52      	subs	r2, r2, r5
 8007e78:	d420      	bmi.n	8007ebc <_malloc_r+0xd0>
 8007e7a:	2a0b      	cmp	r2, #11
 8007e7c:	d917      	bls.n	8007eae <_malloc_r+0xc2>
 8007e7e:	1961      	adds	r1, r4, r5
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	6025      	str	r5, [r4, #0]
 8007e84:	bf18      	it	ne
 8007e86:	6059      	strne	r1, [r3, #4]
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	bf08      	it	eq
 8007e8c:	f8c8 1000 	streq.w	r1, [r8]
 8007e90:	5162      	str	r2, [r4, r5]
 8007e92:	604b      	str	r3, [r1, #4]
 8007e94:	4630      	mov	r0, r6
 8007e96:	f000 f82f 	bl	8007ef8 <__malloc_unlock>
 8007e9a:	f104 000b 	add.w	r0, r4, #11
 8007e9e:	1d23      	adds	r3, r4, #4
 8007ea0:	f020 0007 	bic.w	r0, r0, #7
 8007ea4:	1ac2      	subs	r2, r0, r3
 8007ea6:	bf1c      	itt	ne
 8007ea8:	1a1b      	subne	r3, r3, r0
 8007eaa:	50a3      	strne	r3, [r4, r2]
 8007eac:	e7af      	b.n	8007e0e <_malloc_r+0x22>
 8007eae:	6862      	ldr	r2, [r4, #4]
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	bf0c      	ite	eq
 8007eb4:	f8c8 2000 	streq.w	r2, [r8]
 8007eb8:	605a      	strne	r2, [r3, #4]
 8007eba:	e7eb      	b.n	8007e94 <_malloc_r+0xa8>
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	6864      	ldr	r4, [r4, #4]
 8007ec0:	e7ae      	b.n	8007e20 <_malloc_r+0x34>
 8007ec2:	463c      	mov	r4, r7
 8007ec4:	687f      	ldr	r7, [r7, #4]
 8007ec6:	e7b6      	b.n	8007e36 <_malloc_r+0x4a>
 8007ec8:	461a      	mov	r2, r3
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	d1fb      	bne.n	8007ec8 <_malloc_r+0xdc>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6053      	str	r3, [r2, #4]
 8007ed4:	e7de      	b.n	8007e94 <_malloc_r+0xa8>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	4630      	mov	r0, r6
 8007edc:	f000 f80c 	bl	8007ef8 <__malloc_unlock>
 8007ee0:	e794      	b.n	8007e0c <_malloc_r+0x20>
 8007ee2:	6005      	str	r5, [r0, #0]
 8007ee4:	e7d6      	b.n	8007e94 <_malloc_r+0xa8>
 8007ee6:	bf00      	nop
 8007ee8:	24000998 	.word	0x24000998

08007eec <__malloc_lock>:
 8007eec:	4801      	ldr	r0, [pc, #4]	@ (8007ef4 <__malloc_lock+0x8>)
 8007eee:	f7ff bf0f 	b.w	8007d10 <__retarget_lock_acquire_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	24000990 	.word	0x24000990

08007ef8 <__malloc_unlock>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	@ (8007f00 <__malloc_unlock+0x8>)
 8007efa:	f7ff bf0a 	b.w	8007d12 <__retarget_lock_release_recursive>
 8007efe:	bf00      	nop
 8007f00:	24000990 	.word	0x24000990

08007f04 <__ssputs_r>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	688e      	ldr	r6, [r1, #8]
 8007f0a:	461f      	mov	r7, r3
 8007f0c:	42be      	cmp	r6, r7
 8007f0e:	680b      	ldr	r3, [r1, #0]
 8007f10:	4682      	mov	sl, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	4690      	mov	r8, r2
 8007f16:	d82d      	bhi.n	8007f74 <__ssputs_r+0x70>
 8007f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f20:	d026      	beq.n	8007f70 <__ssputs_r+0x6c>
 8007f22:	6965      	ldr	r5, [r4, #20]
 8007f24:	6909      	ldr	r1, [r1, #16]
 8007f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f2a:	eba3 0901 	sub.w	r9, r3, r1
 8007f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f32:	1c7b      	adds	r3, r7, #1
 8007f34:	444b      	add	r3, r9
 8007f36:	106d      	asrs	r5, r5, #1
 8007f38:	429d      	cmp	r5, r3
 8007f3a:	bf38      	it	cc
 8007f3c:	461d      	movcc	r5, r3
 8007f3e:	0553      	lsls	r3, r2, #21
 8007f40:	d527      	bpl.n	8007f92 <__ssputs_r+0x8e>
 8007f42:	4629      	mov	r1, r5
 8007f44:	f7ff ff52 	bl	8007dec <_malloc_r>
 8007f48:	4606      	mov	r6, r0
 8007f4a:	b360      	cbz	r0, 8007fa6 <__ssputs_r+0xa2>
 8007f4c:	6921      	ldr	r1, [r4, #16]
 8007f4e:	464a      	mov	r2, r9
 8007f50:	f000 fae8 	bl	8008524 <memcpy>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	6126      	str	r6, [r4, #16]
 8007f62:	6165      	str	r5, [r4, #20]
 8007f64:	444e      	add	r6, r9
 8007f66:	eba5 0509 	sub.w	r5, r5, r9
 8007f6a:	6026      	str	r6, [r4, #0]
 8007f6c:	60a5      	str	r5, [r4, #8]
 8007f6e:	463e      	mov	r6, r7
 8007f70:	42be      	cmp	r6, r7
 8007f72:	d900      	bls.n	8007f76 <__ssputs_r+0x72>
 8007f74:	463e      	mov	r6, r7
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	4632      	mov	r2, r6
 8007f7a:	4641      	mov	r1, r8
 8007f7c:	f000 faa8 	bl	80084d0 <memmove>
 8007f80:	68a3      	ldr	r3, [r4, #8]
 8007f82:	1b9b      	subs	r3, r3, r6
 8007f84:	60a3      	str	r3, [r4, #8]
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	4433      	add	r3, r6
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f92:	462a      	mov	r2, r5
 8007f94:	f000 fad4 	bl	8008540 <_realloc_r>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d1e0      	bne.n	8007f60 <__ssputs_r+0x5c>
 8007f9e:	6921      	ldr	r1, [r4, #16]
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	f7ff feb7 	bl	8007d14 <_free_r>
 8007fa6:	230c      	movs	r3, #12
 8007fa8:	f8ca 3000 	str.w	r3, [sl]
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb8:	e7e9      	b.n	8007f8e <__ssputs_r+0x8a>
	...

08007fbc <_svfiprintf_r>:
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	4698      	mov	r8, r3
 8007fc2:	898b      	ldrh	r3, [r1, #12]
 8007fc4:	061b      	lsls	r3, r3, #24
 8007fc6:	b09d      	sub	sp, #116	@ 0x74
 8007fc8:	4607      	mov	r7, r0
 8007fca:	460d      	mov	r5, r1
 8007fcc:	4614      	mov	r4, r2
 8007fce:	d510      	bpl.n	8007ff2 <_svfiprintf_r+0x36>
 8007fd0:	690b      	ldr	r3, [r1, #16]
 8007fd2:	b973      	cbnz	r3, 8007ff2 <_svfiprintf_r+0x36>
 8007fd4:	2140      	movs	r1, #64	@ 0x40
 8007fd6:	f7ff ff09 	bl	8007dec <_malloc_r>
 8007fda:	6028      	str	r0, [r5, #0]
 8007fdc:	6128      	str	r0, [r5, #16]
 8007fde:	b930      	cbnz	r0, 8007fee <_svfiprintf_r+0x32>
 8007fe0:	230c      	movs	r3, #12
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	b01d      	add	sp, #116	@ 0x74
 8007fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fee:	2340      	movs	r3, #64	@ 0x40
 8007ff0:	616b      	str	r3, [r5, #20]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff6:	2320      	movs	r3, #32
 8007ff8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008000:	2330      	movs	r3, #48	@ 0x30
 8008002:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081a0 <_svfiprintf_r+0x1e4>
 8008006:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800800a:	f04f 0901 	mov.w	r9, #1
 800800e:	4623      	mov	r3, r4
 8008010:	469a      	mov	sl, r3
 8008012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008016:	b10a      	cbz	r2, 800801c <_svfiprintf_r+0x60>
 8008018:	2a25      	cmp	r2, #37	@ 0x25
 800801a:	d1f9      	bne.n	8008010 <_svfiprintf_r+0x54>
 800801c:	ebba 0b04 	subs.w	fp, sl, r4
 8008020:	d00b      	beq.n	800803a <_svfiprintf_r+0x7e>
 8008022:	465b      	mov	r3, fp
 8008024:	4622      	mov	r2, r4
 8008026:	4629      	mov	r1, r5
 8008028:	4638      	mov	r0, r7
 800802a:	f7ff ff6b 	bl	8007f04 <__ssputs_r>
 800802e:	3001      	adds	r0, #1
 8008030:	f000 80a7 	beq.w	8008182 <_svfiprintf_r+0x1c6>
 8008034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008036:	445a      	add	r2, fp
 8008038:	9209      	str	r2, [sp, #36]	@ 0x24
 800803a:	f89a 3000 	ldrb.w	r3, [sl]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 809f 	beq.w	8008182 <_svfiprintf_r+0x1c6>
 8008044:	2300      	movs	r3, #0
 8008046:	f04f 32ff 	mov.w	r2, #4294967295
 800804a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800804e:	f10a 0a01 	add.w	sl, sl, #1
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	9307      	str	r3, [sp, #28]
 8008056:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800805a:	931a      	str	r3, [sp, #104]	@ 0x68
 800805c:	4654      	mov	r4, sl
 800805e:	2205      	movs	r2, #5
 8008060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008064:	484e      	ldr	r0, [pc, #312]	@ (80081a0 <_svfiprintf_r+0x1e4>)
 8008066:	f7f8 f93b 	bl	80002e0 <memchr>
 800806a:	9a04      	ldr	r2, [sp, #16]
 800806c:	b9d8      	cbnz	r0, 80080a6 <_svfiprintf_r+0xea>
 800806e:	06d0      	lsls	r0, r2, #27
 8008070:	bf44      	itt	mi
 8008072:	2320      	movmi	r3, #32
 8008074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008078:	0711      	lsls	r1, r2, #28
 800807a:	bf44      	itt	mi
 800807c:	232b      	movmi	r3, #43	@ 0x2b
 800807e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008082:	f89a 3000 	ldrb.w	r3, [sl]
 8008086:	2b2a      	cmp	r3, #42	@ 0x2a
 8008088:	d015      	beq.n	80080b6 <_svfiprintf_r+0xfa>
 800808a:	9a07      	ldr	r2, [sp, #28]
 800808c:	4654      	mov	r4, sl
 800808e:	2000      	movs	r0, #0
 8008090:	f04f 0c0a 	mov.w	ip, #10
 8008094:	4621      	mov	r1, r4
 8008096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800809a:	3b30      	subs	r3, #48	@ 0x30
 800809c:	2b09      	cmp	r3, #9
 800809e:	d94b      	bls.n	8008138 <_svfiprintf_r+0x17c>
 80080a0:	b1b0      	cbz	r0, 80080d0 <_svfiprintf_r+0x114>
 80080a2:	9207      	str	r2, [sp, #28]
 80080a4:	e014      	b.n	80080d0 <_svfiprintf_r+0x114>
 80080a6:	eba0 0308 	sub.w	r3, r0, r8
 80080aa:	fa09 f303 	lsl.w	r3, r9, r3
 80080ae:	4313      	orrs	r3, r2
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	46a2      	mov	sl, r4
 80080b4:	e7d2      	b.n	800805c <_svfiprintf_r+0xa0>
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	1d19      	adds	r1, r3, #4
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	9103      	str	r1, [sp, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bfbb      	ittet	lt
 80080c2:	425b      	neglt	r3, r3
 80080c4:	f042 0202 	orrlt.w	r2, r2, #2
 80080c8:	9307      	strge	r3, [sp, #28]
 80080ca:	9307      	strlt	r3, [sp, #28]
 80080cc:	bfb8      	it	lt
 80080ce:	9204      	strlt	r2, [sp, #16]
 80080d0:	7823      	ldrb	r3, [r4, #0]
 80080d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80080d4:	d10a      	bne.n	80080ec <_svfiprintf_r+0x130>
 80080d6:	7863      	ldrb	r3, [r4, #1]
 80080d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080da:	d132      	bne.n	8008142 <_svfiprintf_r+0x186>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	1d1a      	adds	r2, r3, #4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	9203      	str	r2, [sp, #12]
 80080e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080e8:	3402      	adds	r4, #2
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081b0 <_svfiprintf_r+0x1f4>
 80080f0:	7821      	ldrb	r1, [r4, #0]
 80080f2:	2203      	movs	r2, #3
 80080f4:	4650      	mov	r0, sl
 80080f6:	f7f8 f8f3 	bl	80002e0 <memchr>
 80080fa:	b138      	cbz	r0, 800810c <_svfiprintf_r+0x150>
 80080fc:	9b04      	ldr	r3, [sp, #16]
 80080fe:	eba0 000a 	sub.w	r0, r0, sl
 8008102:	2240      	movs	r2, #64	@ 0x40
 8008104:	4082      	lsls	r2, r0
 8008106:	4313      	orrs	r3, r2
 8008108:	3401      	adds	r4, #1
 800810a:	9304      	str	r3, [sp, #16]
 800810c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008110:	4824      	ldr	r0, [pc, #144]	@ (80081a4 <_svfiprintf_r+0x1e8>)
 8008112:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008116:	2206      	movs	r2, #6
 8008118:	f7f8 f8e2 	bl	80002e0 <memchr>
 800811c:	2800      	cmp	r0, #0
 800811e:	d036      	beq.n	800818e <_svfiprintf_r+0x1d2>
 8008120:	4b21      	ldr	r3, [pc, #132]	@ (80081a8 <_svfiprintf_r+0x1ec>)
 8008122:	bb1b      	cbnz	r3, 800816c <_svfiprintf_r+0x1b0>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	3307      	adds	r3, #7
 8008128:	f023 0307 	bic.w	r3, r3, #7
 800812c:	3308      	adds	r3, #8
 800812e:	9303      	str	r3, [sp, #12]
 8008130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008132:	4433      	add	r3, r6
 8008134:	9309      	str	r3, [sp, #36]	@ 0x24
 8008136:	e76a      	b.n	800800e <_svfiprintf_r+0x52>
 8008138:	fb0c 3202 	mla	r2, ip, r2, r3
 800813c:	460c      	mov	r4, r1
 800813e:	2001      	movs	r0, #1
 8008140:	e7a8      	b.n	8008094 <_svfiprintf_r+0xd8>
 8008142:	2300      	movs	r3, #0
 8008144:	3401      	adds	r4, #1
 8008146:	9305      	str	r3, [sp, #20]
 8008148:	4619      	mov	r1, r3
 800814a:	f04f 0c0a 	mov.w	ip, #10
 800814e:	4620      	mov	r0, r4
 8008150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008154:	3a30      	subs	r2, #48	@ 0x30
 8008156:	2a09      	cmp	r2, #9
 8008158:	d903      	bls.n	8008162 <_svfiprintf_r+0x1a6>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0c6      	beq.n	80080ec <_svfiprintf_r+0x130>
 800815e:	9105      	str	r1, [sp, #20]
 8008160:	e7c4      	b.n	80080ec <_svfiprintf_r+0x130>
 8008162:	fb0c 2101 	mla	r1, ip, r1, r2
 8008166:	4604      	mov	r4, r0
 8008168:	2301      	movs	r3, #1
 800816a:	e7f0      	b.n	800814e <_svfiprintf_r+0x192>
 800816c:	ab03      	add	r3, sp, #12
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	462a      	mov	r2, r5
 8008172:	4b0e      	ldr	r3, [pc, #56]	@ (80081ac <_svfiprintf_r+0x1f0>)
 8008174:	a904      	add	r1, sp, #16
 8008176:	4638      	mov	r0, r7
 8008178:	f3af 8000 	nop.w
 800817c:	1c42      	adds	r2, r0, #1
 800817e:	4606      	mov	r6, r0
 8008180:	d1d6      	bne.n	8008130 <_svfiprintf_r+0x174>
 8008182:	89ab      	ldrh	r3, [r5, #12]
 8008184:	065b      	lsls	r3, r3, #25
 8008186:	f53f af2d 	bmi.w	8007fe4 <_svfiprintf_r+0x28>
 800818a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800818c:	e72c      	b.n	8007fe8 <_svfiprintf_r+0x2c>
 800818e:	ab03      	add	r3, sp, #12
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	462a      	mov	r2, r5
 8008194:	4b05      	ldr	r3, [pc, #20]	@ (80081ac <_svfiprintf_r+0x1f0>)
 8008196:	a904      	add	r1, sp, #16
 8008198:	4638      	mov	r0, r7
 800819a:	f000 f879 	bl	8008290 <_printf_i>
 800819e:	e7ed      	b.n	800817c <_svfiprintf_r+0x1c0>
 80081a0:	08008608 	.word	0x08008608
 80081a4:	08008612 	.word	0x08008612
 80081a8:	00000000 	.word	0x00000000
 80081ac:	08007f05 	.word	0x08007f05
 80081b0:	0800860e 	.word	0x0800860e

080081b4 <_printf_common>:
 80081b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b8:	4616      	mov	r6, r2
 80081ba:	4698      	mov	r8, r3
 80081bc:	688a      	ldr	r2, [r1, #8]
 80081be:	690b      	ldr	r3, [r1, #16]
 80081c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081c4:	4293      	cmp	r3, r2
 80081c6:	bfb8      	it	lt
 80081c8:	4613      	movlt	r3, r2
 80081ca:	6033      	str	r3, [r6, #0]
 80081cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081d0:	4607      	mov	r7, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	b10a      	cbz	r2, 80081da <_printf_common+0x26>
 80081d6:	3301      	adds	r3, #1
 80081d8:	6033      	str	r3, [r6, #0]
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	0699      	lsls	r1, r3, #26
 80081de:	bf42      	ittt	mi
 80081e0:	6833      	ldrmi	r3, [r6, #0]
 80081e2:	3302      	addmi	r3, #2
 80081e4:	6033      	strmi	r3, [r6, #0]
 80081e6:	6825      	ldr	r5, [r4, #0]
 80081e8:	f015 0506 	ands.w	r5, r5, #6
 80081ec:	d106      	bne.n	80081fc <_printf_common+0x48>
 80081ee:	f104 0a19 	add.w	sl, r4, #25
 80081f2:	68e3      	ldr	r3, [r4, #12]
 80081f4:	6832      	ldr	r2, [r6, #0]
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	42ab      	cmp	r3, r5
 80081fa:	dc26      	bgt.n	800824a <_printf_common+0x96>
 80081fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	3b00      	subs	r3, #0
 8008204:	bf18      	it	ne
 8008206:	2301      	movne	r3, #1
 8008208:	0692      	lsls	r2, r2, #26
 800820a:	d42b      	bmi.n	8008264 <_printf_common+0xb0>
 800820c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008210:	4641      	mov	r1, r8
 8008212:	4638      	mov	r0, r7
 8008214:	47c8      	blx	r9
 8008216:	3001      	adds	r0, #1
 8008218:	d01e      	beq.n	8008258 <_printf_common+0xa4>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	6922      	ldr	r2, [r4, #16]
 800821e:	f003 0306 	and.w	r3, r3, #6
 8008222:	2b04      	cmp	r3, #4
 8008224:	bf02      	ittt	eq
 8008226:	68e5      	ldreq	r5, [r4, #12]
 8008228:	6833      	ldreq	r3, [r6, #0]
 800822a:	1aed      	subeq	r5, r5, r3
 800822c:	68a3      	ldr	r3, [r4, #8]
 800822e:	bf0c      	ite	eq
 8008230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008234:	2500      	movne	r5, #0
 8008236:	4293      	cmp	r3, r2
 8008238:	bfc4      	itt	gt
 800823a:	1a9b      	subgt	r3, r3, r2
 800823c:	18ed      	addgt	r5, r5, r3
 800823e:	2600      	movs	r6, #0
 8008240:	341a      	adds	r4, #26
 8008242:	42b5      	cmp	r5, r6
 8008244:	d11a      	bne.n	800827c <_printf_common+0xc8>
 8008246:	2000      	movs	r0, #0
 8008248:	e008      	b.n	800825c <_printf_common+0xa8>
 800824a:	2301      	movs	r3, #1
 800824c:	4652      	mov	r2, sl
 800824e:	4641      	mov	r1, r8
 8008250:	4638      	mov	r0, r7
 8008252:	47c8      	blx	r9
 8008254:	3001      	adds	r0, #1
 8008256:	d103      	bne.n	8008260 <_printf_common+0xac>
 8008258:	f04f 30ff 	mov.w	r0, #4294967295
 800825c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008260:	3501      	adds	r5, #1
 8008262:	e7c6      	b.n	80081f2 <_printf_common+0x3e>
 8008264:	18e1      	adds	r1, r4, r3
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	2030      	movs	r0, #48	@ 0x30
 800826a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800826e:	4422      	add	r2, r4
 8008270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008278:	3302      	adds	r3, #2
 800827a:	e7c7      	b.n	800820c <_printf_common+0x58>
 800827c:	2301      	movs	r3, #1
 800827e:	4622      	mov	r2, r4
 8008280:	4641      	mov	r1, r8
 8008282:	4638      	mov	r0, r7
 8008284:	47c8      	blx	r9
 8008286:	3001      	adds	r0, #1
 8008288:	d0e6      	beq.n	8008258 <_printf_common+0xa4>
 800828a:	3601      	adds	r6, #1
 800828c:	e7d9      	b.n	8008242 <_printf_common+0x8e>
	...

08008290 <_printf_i>:
 8008290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008294:	7e0f      	ldrb	r7, [r1, #24]
 8008296:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008298:	2f78      	cmp	r7, #120	@ 0x78
 800829a:	4691      	mov	r9, r2
 800829c:	4680      	mov	r8, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	469a      	mov	sl, r3
 80082a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082a6:	d807      	bhi.n	80082b8 <_printf_i+0x28>
 80082a8:	2f62      	cmp	r7, #98	@ 0x62
 80082aa:	d80a      	bhi.n	80082c2 <_printf_i+0x32>
 80082ac:	2f00      	cmp	r7, #0
 80082ae:	f000 80d2 	beq.w	8008456 <_printf_i+0x1c6>
 80082b2:	2f58      	cmp	r7, #88	@ 0x58
 80082b4:	f000 80b9 	beq.w	800842a <_printf_i+0x19a>
 80082b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082c0:	e03a      	b.n	8008338 <_printf_i+0xa8>
 80082c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082c6:	2b15      	cmp	r3, #21
 80082c8:	d8f6      	bhi.n	80082b8 <_printf_i+0x28>
 80082ca:	a101      	add	r1, pc, #4	@ (adr r1, 80082d0 <_printf_i+0x40>)
 80082cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082d0:	08008329 	.word	0x08008329
 80082d4:	0800833d 	.word	0x0800833d
 80082d8:	080082b9 	.word	0x080082b9
 80082dc:	080082b9 	.word	0x080082b9
 80082e0:	080082b9 	.word	0x080082b9
 80082e4:	080082b9 	.word	0x080082b9
 80082e8:	0800833d 	.word	0x0800833d
 80082ec:	080082b9 	.word	0x080082b9
 80082f0:	080082b9 	.word	0x080082b9
 80082f4:	080082b9 	.word	0x080082b9
 80082f8:	080082b9 	.word	0x080082b9
 80082fc:	0800843d 	.word	0x0800843d
 8008300:	08008367 	.word	0x08008367
 8008304:	080083f7 	.word	0x080083f7
 8008308:	080082b9 	.word	0x080082b9
 800830c:	080082b9 	.word	0x080082b9
 8008310:	0800845f 	.word	0x0800845f
 8008314:	080082b9 	.word	0x080082b9
 8008318:	08008367 	.word	0x08008367
 800831c:	080082b9 	.word	0x080082b9
 8008320:	080082b9 	.word	0x080082b9
 8008324:	080083ff 	.word	0x080083ff
 8008328:	6833      	ldr	r3, [r6, #0]
 800832a:	1d1a      	adds	r2, r3, #4
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6032      	str	r2, [r6, #0]
 8008330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008338:	2301      	movs	r3, #1
 800833a:	e09d      	b.n	8008478 <_printf_i+0x1e8>
 800833c:	6833      	ldr	r3, [r6, #0]
 800833e:	6820      	ldr	r0, [r4, #0]
 8008340:	1d19      	adds	r1, r3, #4
 8008342:	6031      	str	r1, [r6, #0]
 8008344:	0606      	lsls	r6, r0, #24
 8008346:	d501      	bpl.n	800834c <_printf_i+0xbc>
 8008348:	681d      	ldr	r5, [r3, #0]
 800834a:	e003      	b.n	8008354 <_printf_i+0xc4>
 800834c:	0645      	lsls	r5, r0, #25
 800834e:	d5fb      	bpl.n	8008348 <_printf_i+0xb8>
 8008350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008354:	2d00      	cmp	r5, #0
 8008356:	da03      	bge.n	8008360 <_printf_i+0xd0>
 8008358:	232d      	movs	r3, #45	@ 0x2d
 800835a:	426d      	negs	r5, r5
 800835c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008360:	4859      	ldr	r0, [pc, #356]	@ (80084c8 <_printf_i+0x238>)
 8008362:	230a      	movs	r3, #10
 8008364:	e011      	b.n	800838a <_printf_i+0xfa>
 8008366:	6821      	ldr	r1, [r4, #0]
 8008368:	6833      	ldr	r3, [r6, #0]
 800836a:	0608      	lsls	r0, r1, #24
 800836c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008370:	d402      	bmi.n	8008378 <_printf_i+0xe8>
 8008372:	0649      	lsls	r1, r1, #25
 8008374:	bf48      	it	mi
 8008376:	b2ad      	uxthmi	r5, r5
 8008378:	2f6f      	cmp	r7, #111	@ 0x6f
 800837a:	4853      	ldr	r0, [pc, #332]	@ (80084c8 <_printf_i+0x238>)
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	bf14      	ite	ne
 8008380:	230a      	movne	r3, #10
 8008382:	2308      	moveq	r3, #8
 8008384:	2100      	movs	r1, #0
 8008386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800838a:	6866      	ldr	r6, [r4, #4]
 800838c:	60a6      	str	r6, [r4, #8]
 800838e:	2e00      	cmp	r6, #0
 8008390:	bfa2      	ittt	ge
 8008392:	6821      	ldrge	r1, [r4, #0]
 8008394:	f021 0104 	bicge.w	r1, r1, #4
 8008398:	6021      	strge	r1, [r4, #0]
 800839a:	b90d      	cbnz	r5, 80083a0 <_printf_i+0x110>
 800839c:	2e00      	cmp	r6, #0
 800839e:	d04b      	beq.n	8008438 <_printf_i+0x1a8>
 80083a0:	4616      	mov	r6, r2
 80083a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80083a6:	fb03 5711 	mls	r7, r3, r1, r5
 80083aa:	5dc7      	ldrb	r7, [r0, r7]
 80083ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083b0:	462f      	mov	r7, r5
 80083b2:	42bb      	cmp	r3, r7
 80083b4:	460d      	mov	r5, r1
 80083b6:	d9f4      	bls.n	80083a2 <_printf_i+0x112>
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d10b      	bne.n	80083d4 <_printf_i+0x144>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	07df      	lsls	r7, r3, #31
 80083c0:	d508      	bpl.n	80083d4 <_printf_i+0x144>
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	6861      	ldr	r1, [r4, #4]
 80083c6:	4299      	cmp	r1, r3
 80083c8:	bfde      	ittt	le
 80083ca:	2330      	movle	r3, #48	@ 0x30
 80083cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083d4:	1b92      	subs	r2, r2, r6
 80083d6:	6122      	str	r2, [r4, #16]
 80083d8:	f8cd a000 	str.w	sl, [sp]
 80083dc:	464b      	mov	r3, r9
 80083de:	aa03      	add	r2, sp, #12
 80083e0:	4621      	mov	r1, r4
 80083e2:	4640      	mov	r0, r8
 80083e4:	f7ff fee6 	bl	80081b4 <_printf_common>
 80083e8:	3001      	adds	r0, #1
 80083ea:	d14a      	bne.n	8008482 <_printf_i+0x1f2>
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	b004      	add	sp, #16
 80083f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	f043 0320 	orr.w	r3, r3, #32
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	4833      	ldr	r0, [pc, #204]	@ (80084cc <_printf_i+0x23c>)
 8008400:	2778      	movs	r7, #120	@ 0x78
 8008402:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	6831      	ldr	r1, [r6, #0]
 800840a:	061f      	lsls	r7, r3, #24
 800840c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008410:	d402      	bmi.n	8008418 <_printf_i+0x188>
 8008412:	065f      	lsls	r7, r3, #25
 8008414:	bf48      	it	mi
 8008416:	b2ad      	uxthmi	r5, r5
 8008418:	6031      	str	r1, [r6, #0]
 800841a:	07d9      	lsls	r1, r3, #31
 800841c:	bf44      	itt	mi
 800841e:	f043 0320 	orrmi.w	r3, r3, #32
 8008422:	6023      	strmi	r3, [r4, #0]
 8008424:	b11d      	cbz	r5, 800842e <_printf_i+0x19e>
 8008426:	2310      	movs	r3, #16
 8008428:	e7ac      	b.n	8008384 <_printf_i+0xf4>
 800842a:	4827      	ldr	r0, [pc, #156]	@ (80084c8 <_printf_i+0x238>)
 800842c:	e7e9      	b.n	8008402 <_printf_i+0x172>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	f023 0320 	bic.w	r3, r3, #32
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	e7f6      	b.n	8008426 <_printf_i+0x196>
 8008438:	4616      	mov	r6, r2
 800843a:	e7bd      	b.n	80083b8 <_printf_i+0x128>
 800843c:	6833      	ldr	r3, [r6, #0]
 800843e:	6825      	ldr	r5, [r4, #0]
 8008440:	6961      	ldr	r1, [r4, #20]
 8008442:	1d18      	adds	r0, r3, #4
 8008444:	6030      	str	r0, [r6, #0]
 8008446:	062e      	lsls	r6, r5, #24
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	d501      	bpl.n	8008450 <_printf_i+0x1c0>
 800844c:	6019      	str	r1, [r3, #0]
 800844e:	e002      	b.n	8008456 <_printf_i+0x1c6>
 8008450:	0668      	lsls	r0, r5, #25
 8008452:	d5fb      	bpl.n	800844c <_printf_i+0x1bc>
 8008454:	8019      	strh	r1, [r3, #0]
 8008456:	2300      	movs	r3, #0
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	4616      	mov	r6, r2
 800845c:	e7bc      	b.n	80083d8 <_printf_i+0x148>
 800845e:	6833      	ldr	r3, [r6, #0]
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	6032      	str	r2, [r6, #0]
 8008464:	681e      	ldr	r6, [r3, #0]
 8008466:	6862      	ldr	r2, [r4, #4]
 8008468:	2100      	movs	r1, #0
 800846a:	4630      	mov	r0, r6
 800846c:	f7f7 ff38 	bl	80002e0 <memchr>
 8008470:	b108      	cbz	r0, 8008476 <_printf_i+0x1e6>
 8008472:	1b80      	subs	r0, r0, r6
 8008474:	6060      	str	r0, [r4, #4]
 8008476:	6863      	ldr	r3, [r4, #4]
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	2300      	movs	r3, #0
 800847c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008480:	e7aa      	b.n	80083d8 <_printf_i+0x148>
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	4632      	mov	r2, r6
 8008486:	4649      	mov	r1, r9
 8008488:	4640      	mov	r0, r8
 800848a:	47d0      	blx	sl
 800848c:	3001      	adds	r0, #1
 800848e:	d0ad      	beq.n	80083ec <_printf_i+0x15c>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	079b      	lsls	r3, r3, #30
 8008494:	d413      	bmi.n	80084be <_printf_i+0x22e>
 8008496:	68e0      	ldr	r0, [r4, #12]
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	4298      	cmp	r0, r3
 800849c:	bfb8      	it	lt
 800849e:	4618      	movlt	r0, r3
 80084a0:	e7a6      	b.n	80083f0 <_printf_i+0x160>
 80084a2:	2301      	movs	r3, #1
 80084a4:	4632      	mov	r2, r6
 80084a6:	4649      	mov	r1, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	47d0      	blx	sl
 80084ac:	3001      	adds	r0, #1
 80084ae:	d09d      	beq.n	80083ec <_printf_i+0x15c>
 80084b0:	3501      	adds	r5, #1
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	9903      	ldr	r1, [sp, #12]
 80084b6:	1a5b      	subs	r3, r3, r1
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dcf2      	bgt.n	80084a2 <_printf_i+0x212>
 80084bc:	e7eb      	b.n	8008496 <_printf_i+0x206>
 80084be:	2500      	movs	r5, #0
 80084c0:	f104 0619 	add.w	r6, r4, #25
 80084c4:	e7f5      	b.n	80084b2 <_printf_i+0x222>
 80084c6:	bf00      	nop
 80084c8:	08008619 	.word	0x08008619
 80084cc:	0800862a 	.word	0x0800862a

080084d0 <memmove>:
 80084d0:	4288      	cmp	r0, r1
 80084d2:	b510      	push	{r4, lr}
 80084d4:	eb01 0402 	add.w	r4, r1, r2
 80084d8:	d902      	bls.n	80084e0 <memmove+0x10>
 80084da:	4284      	cmp	r4, r0
 80084dc:	4623      	mov	r3, r4
 80084de:	d807      	bhi.n	80084f0 <memmove+0x20>
 80084e0:	1e43      	subs	r3, r0, #1
 80084e2:	42a1      	cmp	r1, r4
 80084e4:	d008      	beq.n	80084f8 <memmove+0x28>
 80084e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ee:	e7f8      	b.n	80084e2 <memmove+0x12>
 80084f0:	4402      	add	r2, r0
 80084f2:	4601      	mov	r1, r0
 80084f4:	428a      	cmp	r2, r1
 80084f6:	d100      	bne.n	80084fa <memmove+0x2a>
 80084f8:	bd10      	pop	{r4, pc}
 80084fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008502:	e7f7      	b.n	80084f4 <memmove+0x24>

08008504 <_sbrk_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4d06      	ldr	r5, [pc, #24]	@ (8008520 <_sbrk_r+0x1c>)
 8008508:	2300      	movs	r3, #0
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	f7f8 fe86 	bl	8001220 <_sbrk>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <_sbrk_r+0x1a>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	b103      	cbz	r3, 800851e <_sbrk_r+0x1a>
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	2400098c 	.word	0x2400098c

08008524 <memcpy>:
 8008524:	440a      	add	r2, r1
 8008526:	4291      	cmp	r1, r2
 8008528:	f100 33ff 	add.w	r3, r0, #4294967295
 800852c:	d100      	bne.n	8008530 <memcpy+0xc>
 800852e:	4770      	bx	lr
 8008530:	b510      	push	{r4, lr}
 8008532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800853a:	4291      	cmp	r1, r2
 800853c:	d1f9      	bne.n	8008532 <memcpy+0xe>
 800853e:	bd10      	pop	{r4, pc}

08008540 <_realloc_r>:
 8008540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008544:	4680      	mov	r8, r0
 8008546:	4615      	mov	r5, r2
 8008548:	460c      	mov	r4, r1
 800854a:	b921      	cbnz	r1, 8008556 <_realloc_r+0x16>
 800854c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008550:	4611      	mov	r1, r2
 8008552:	f7ff bc4b 	b.w	8007dec <_malloc_r>
 8008556:	b92a      	cbnz	r2, 8008564 <_realloc_r+0x24>
 8008558:	f7ff fbdc 	bl	8007d14 <_free_r>
 800855c:	2400      	movs	r4, #0
 800855e:	4620      	mov	r0, r4
 8008560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008564:	f000 f81a 	bl	800859c <_malloc_usable_size_r>
 8008568:	4285      	cmp	r5, r0
 800856a:	4606      	mov	r6, r0
 800856c:	d802      	bhi.n	8008574 <_realloc_r+0x34>
 800856e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008572:	d8f4      	bhi.n	800855e <_realloc_r+0x1e>
 8008574:	4629      	mov	r1, r5
 8008576:	4640      	mov	r0, r8
 8008578:	f7ff fc38 	bl	8007dec <_malloc_r>
 800857c:	4607      	mov	r7, r0
 800857e:	2800      	cmp	r0, #0
 8008580:	d0ec      	beq.n	800855c <_realloc_r+0x1c>
 8008582:	42b5      	cmp	r5, r6
 8008584:	462a      	mov	r2, r5
 8008586:	4621      	mov	r1, r4
 8008588:	bf28      	it	cs
 800858a:	4632      	movcs	r2, r6
 800858c:	f7ff ffca 	bl	8008524 <memcpy>
 8008590:	4621      	mov	r1, r4
 8008592:	4640      	mov	r0, r8
 8008594:	f7ff fbbe 	bl	8007d14 <_free_r>
 8008598:	463c      	mov	r4, r7
 800859a:	e7e0      	b.n	800855e <_realloc_r+0x1e>

0800859c <_malloc_usable_size_r>:
 800859c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a0:	1f18      	subs	r0, r3, #4
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bfbc      	itt	lt
 80085a6:	580b      	ldrlt	r3, [r1, r0]
 80085a8:	18c0      	addlt	r0, r0, r3
 80085aa:	4770      	bx	lr

080085ac <_init>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	bf00      	nop
 80085b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b2:	bc08      	pop	{r3}
 80085b4:	469e      	mov	lr, r3
 80085b6:	4770      	bx	lr

080085b8 <_fini>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	bf00      	nop
 80085bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085be:	bc08      	pop	{r3}
 80085c0:	469e      	mov	lr, r3
 80085c2:	4770      	bx	lr
